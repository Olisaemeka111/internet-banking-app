module.internet_banking.module.security_scanning.data.archive_file.security_notification_zip: Reading...
module.internet_banking.module.security_scanning.data.archive_file.security_notification_zip: Read complete after 0s [id=be52a1757fb68f987379b4b38a1d40437ef2056f]
module.internet_banking.module.waf.data.aws_caller_identity.current: Reading...
module.internet_banking.module.waf.data.aws_caller_identity.current: Read complete after 0s [id=156041437006]
module.internet_banking.module.waf.data.aws_region.current: Reading...
module.internet_banking.module.waf.data.aws_region.current: Read complete after 0s [id=us-east-1]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform planned the following actions, but then encountered a problem:

  # module.internet_banking.module.codepipeline.aws_codebuild_project.service_builds["api_gateway"] will be created
  + resource "aws_codebuild_project" "service_builds" {
      + arn                  = (known after apply)
      + badge_enabled        = false
      + badge_url            = (known after apply)
      + build_timeout        = 15
      + description          = "Build project for internet-banking-api-gateway in dev environment"
      + encryption_key       = (known after apply)
      + id                   = (known after apply)
      + name                 = "dev-internet-banking-api-gateway-build"
      + project_visibility   = "PRIVATE"
      + public_project_alias = (known after apply)
      + queued_timeout       = 480
      + service_role         = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + artifacts {
          + encryption_disabled    = false
          + override_artifact_name = false
          + type                   = "CODEPIPELINE"
        }

      + environment {
          + compute_type                = "BUILD_GENERAL1_SMALL"
          + image                       = "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
          + image_pull_credentials_type = "CODEBUILD"
          + privileged_mode             = true
          + type                        = "LINUX_CONTAINER"

          + environment_variable {
              + name  = "AWS_ACCOUNT_ID"
              + type  = "PLAINTEXT"
              + value = "156041437006"
            }
          + environment_variable {
              + name  = "AWS_REGION"
              + type  = "PLAINTEXT"
              + value = "us-east-1"
            }
          + environment_variable {
              + name  = "ECR_REPOSITORY_URI"
              + type  = "PLAINTEXT"
              + value = (known after apply)
            }
          + environment_variable {
              + name  = "ENVIRONMENT"
              + type  = "PLAINTEXT"
              + value = "dev"
            }
        }

      + logs_config {
          + cloudwatch_logs {
              + group_name  = "/codebuild/dev-internet-banking-api-gateway"
              + status      = "ENABLED"
              + stream_name = "build-log"
            }
        }

      + source {
          + buildspec = "buildspec.yml"
          + type      = "CODEPIPELINE"
        }
    }

  # module.internet_banking.module.codepipeline.aws_codebuild_project.service_builds["config_server"] will be created
  + resource "aws_codebuild_project" "service_builds" {
      + arn                  = (known after apply)
      + badge_enabled        = false
      + badge_url            = (known after apply)
      + build_timeout        = 15
      + description          = "Build project for internet-banking-config-server in dev environment"
      + encryption_key       = (known after apply)
      + id                   = (known after apply)
      + name                 = "dev-internet-banking-config-server-build"
      + project_visibility   = "PRIVATE"
      + public_project_alias = (known after apply)
      + queued_timeout       = 480
      + service_role         = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + artifacts {
          + encryption_disabled    = false
          + override_artifact_name = false
          + type                   = "CODEPIPELINE"
        }

      + environment {
          + compute_type                = "BUILD_GENERAL1_SMALL"
          + image                       = "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
          + image_pull_credentials_type = "CODEBUILD"
          + privileged_mode             = true
          + type                        = "LINUX_CONTAINER"

          + environment_variable {
              + name  = "AWS_ACCOUNT_ID"
              + type  = "PLAINTEXT"
              + value = "156041437006"
            }
          + environment_variable {
              + name  = "AWS_REGION"
              + type  = "PLAINTEXT"
              + value = "us-east-1"
            }
          + environment_variable {
              + name  = "ECR_REPOSITORY_URI"
              + type  = "PLAINTEXT"
              + value = (known after apply)
            }
          + environment_variable {
              + name  = "ENVIRONMENT"
              + type  = "PLAINTEXT"
              + value = "dev"
            }
        }

      + logs_config {
          + cloudwatch_logs {
              + group_name  = "/codebuild/dev-internet-banking-config-server"
              + status      = "ENABLED"
              + stream_name = "build-log"
            }
        }

      + source {
          + buildspec = "buildspec.yml"
          + type      = "CODEPIPELINE"
        }
    }

  # module.internet_banking.module.codepipeline.aws_codebuild_project.service_builds["core_banking_service"] will be created
  + resource "aws_codebuild_project" "service_builds" {
      + arn                  = (known after apply)
      + badge_enabled        = false
      + badge_url            = (known after apply)
      + build_timeout        = 15
      + description          = "Build project for core-banking-service in dev environment"
      + encryption_key       = (known after apply)
      + id                   = (known after apply)
      + name                 = "dev-core-banking-service-build"
      + project_visibility   = "PRIVATE"
      + public_project_alias = (known after apply)
      + queued_timeout       = 480
      + service_role         = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + artifacts {
          + encryption_disabled    = false
          + override_artifact_name = false
          + type                   = "CODEPIPELINE"
        }

      + environment {
          + compute_type                = "BUILD_GENERAL1_SMALL"
          + image                       = "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
          + image_pull_credentials_type = "CODEBUILD"
          + privileged_mode             = true
          + type                        = "LINUX_CONTAINER"

          + environment_variable {
              + name  = "AWS_ACCOUNT_ID"
              + type  = "PLAINTEXT"
              + value = "156041437006"
            }
          + environment_variable {
              + name  = "AWS_REGION"
              + type  = "PLAINTEXT"
              + value = "us-east-1"
            }
          + environment_variable {
              + name  = "ECR_REPOSITORY_URI"
              + type  = "PLAINTEXT"
              + value = (known after apply)
            }
          + environment_variable {
              + name  = "ENVIRONMENT"
              + type  = "PLAINTEXT"
              + value = "dev"
            }
        }

      + logs_config {
          + cloudwatch_logs {
              + group_name  = "/codebuild/dev-core-banking-service"
              + status      = "ENABLED"
              + stream_name = "build-log"
            }
        }

      + source {
          + buildspec = "buildspec.yml"
          + type      = "CODEPIPELINE"
        }
    }

  # module.internet_banking.module.codepipeline.aws_codebuild_project.service_builds["fund_transfer_service"] will be created
  + resource "aws_codebuild_project" "service_builds" {
      + arn                  = (known after apply)
      + badge_enabled        = false
      + badge_url            = (known after apply)
      + build_timeout        = 15
      + description          = "Build project for internet-banking-fund-transfer-service in dev environment"
      + encryption_key       = (known after apply)
      + id                   = (known after apply)
      + name                 = "dev-internet-banking-fund-transfer-service-build"
      + project_visibility   = "PRIVATE"
      + public_project_alias = (known after apply)
      + queued_timeout       = 480
      + service_role         = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + artifacts {
          + encryption_disabled    = false
          + override_artifact_name = false
          + type                   = "CODEPIPELINE"
        }

      + environment {
          + compute_type                = "BUILD_GENERAL1_SMALL"
          + image                       = "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
          + image_pull_credentials_type = "CODEBUILD"
          + privileged_mode             = true
          + type                        = "LINUX_CONTAINER"

          + environment_variable {
              + name  = "AWS_ACCOUNT_ID"
              + type  = "PLAINTEXT"
              + value = "156041437006"
            }
          + environment_variable {
              + name  = "AWS_REGION"
              + type  = "PLAINTEXT"
              + value = "us-east-1"
            }
          + environment_variable {
              + name  = "ECR_REPOSITORY_URI"
              + type  = "PLAINTEXT"
              + value = (known after apply)
            }
          + environment_variable {
              + name  = "ENVIRONMENT"
              + type  = "PLAINTEXT"
              + value = "dev"
            }
        }

      + logs_config {
          + cloudwatch_logs {
              + group_name  = "/codebuild/dev-internet-banking-fund-transfer-service"
              + status      = "ENABLED"
              + stream_name = "build-log"
            }
        }

      + source {
          + buildspec = "buildspec.yml"
          + type      = "CODEPIPELINE"
        }
    }

  # module.internet_banking.module.codepipeline.aws_codebuild_project.service_builds["keycloak"] will be created
  + resource "aws_codebuild_project" "service_builds" {
      + arn                  = (known after apply)
      + badge_enabled        = false
      + badge_url            = (known after apply)
      + build_timeout        = 15
      + description          = "Build project for keycloak in dev environment"
      + encryption_key       = (known after apply)
      + id                   = (known after apply)
      + name                 = "dev-keycloak-build"
      + project_visibility   = "PRIVATE"
      + public_project_alias = (known after apply)
      + queued_timeout       = 480
      + service_role         = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + artifacts {
          + encryption_disabled    = false
          + override_artifact_name = false
          + type                   = "CODEPIPELINE"
        }

      + environment {
          + compute_type                = "BUILD_GENERAL1_SMALL"
          + image                       = "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
          + image_pull_credentials_type = "CODEBUILD"
          + privileged_mode             = true
          + type                        = "LINUX_CONTAINER"

          + environment_variable {
              + name  = "AWS_ACCOUNT_ID"
              + type  = "PLAINTEXT"
              + value = "156041437006"
            }
          + environment_variable {
              + name  = "AWS_REGION"
              + type  = "PLAINTEXT"
              + value = "us-east-1"
            }
          + environment_variable {
              + name  = "ECR_REPOSITORY_URI"
              + type  = "PLAINTEXT"
              + value = (known after apply)
            }
          + environment_variable {
              + name  = "ENVIRONMENT"
              + type  = "PLAINTEXT"
              + value = "dev"
            }
        }

      + logs_config {
          + cloudwatch_logs {
              + group_name  = "/codebuild/dev-keycloak"
              + status      = "ENABLED"
              + stream_name = "build-log"
            }
        }

      + source {
          + buildspec = "buildspec.yml"
          + type      = "CODEPIPELINE"
        }
    }

  # module.internet_banking.module.codepipeline.aws_codebuild_project.service_builds["service_registry"] will be created
  + resource "aws_codebuild_project" "service_builds" {
      + arn                  = (known after apply)
      + badge_enabled        = false
      + badge_url            = (known after apply)
      + build_timeout        = 15
      + description          = "Build project for internet-banking-service-registry in dev environment"
      + encryption_key       = (known after apply)
      + id                   = (known after apply)
      + name                 = "dev-internet-banking-service-registry-build"
      + project_visibility   = "PRIVATE"
      + public_project_alias = (known after apply)
      + queued_timeout       = 480
      + service_role         = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + artifacts {
          + encryption_disabled    = false
          + override_artifact_name = false
          + type                   = "CODEPIPELINE"
        }

      + environment {
          + compute_type                = "BUILD_GENERAL1_SMALL"
          + image                       = "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
          + image_pull_credentials_type = "CODEBUILD"
          + privileged_mode             = true
          + type                        = "LINUX_CONTAINER"

          + environment_variable {
              + name  = "AWS_ACCOUNT_ID"
              + type  = "PLAINTEXT"
              + value = "156041437006"
            }
          + environment_variable {
              + name  = "AWS_REGION"
              + type  = "PLAINTEXT"
              + value = "us-east-1"
            }
          + environment_variable {
              + name  = "ECR_REPOSITORY_URI"
              + type  = "PLAINTEXT"
              + value = (known after apply)
            }
          + environment_variable {
              + name  = "ENVIRONMENT"
              + type  = "PLAINTEXT"
              + value = "dev"
            }
        }

      + logs_config {
          + cloudwatch_logs {
              + group_name  = "/codebuild/dev-internet-banking-service-registry"
              + status      = "ENABLED"
              + stream_name = "build-log"
            }
        }

      + source {
          + buildspec = "buildspec.yml"
          + type      = "CODEPIPELINE"
        }
    }

  # module.internet_banking.module.codepipeline.aws_codebuild_project.service_builds["user_service"] will be created
  + resource "aws_codebuild_project" "service_builds" {
      + arn                  = (known after apply)
      + badge_enabled        = false
      + badge_url            = (known after apply)
      + build_timeout        = 15
      + description          = "Build project for internet-banking-user-service in dev environment"
      + encryption_key       = (known after apply)
      + id                   = (known after apply)
      + name                 = "dev-internet-banking-user-service-build"
      + project_visibility   = "PRIVATE"
      + public_project_alias = (known after apply)
      + queued_timeout       = 480
      + service_role         = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + artifacts {
          + encryption_disabled    = false
          + override_artifact_name = false
          + type                   = "CODEPIPELINE"
        }

      + environment {
          + compute_type                = "BUILD_GENERAL1_SMALL"
          + image                       = "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
          + image_pull_credentials_type = "CODEBUILD"
          + privileged_mode             = true
          + type                        = "LINUX_CONTAINER"

          + environment_variable {
              + name  = "AWS_ACCOUNT_ID"
              + type  = "PLAINTEXT"
              + value = "156041437006"
            }
          + environment_variable {
              + name  = "AWS_REGION"
              + type  = "PLAINTEXT"
              + value = "us-east-1"
            }
          + environment_variable {
              + name  = "ECR_REPOSITORY_URI"
              + type  = "PLAINTEXT"
              + value = (known after apply)
            }
          + environment_variable {
              + name  = "ENVIRONMENT"
              + type  = "PLAINTEXT"
              + value = "dev"
            }
        }

      + logs_config {
          + cloudwatch_logs {
              + group_name  = "/codebuild/dev-internet-banking-user-service"
              + status      = "ENABLED"
              + stream_name = "build-log"
            }
        }

      + source {
          + buildspec = "buildspec.yml"
          + type      = "CODEPIPELINE"
        }
    }

  # module.internet_banking.module.codepipeline.aws_codebuild_project.service_builds["utility_payment_service"] will be created
  + resource "aws_codebuild_project" "service_builds" {
      + arn                  = (known after apply)
      + badge_enabled        = false
      + badge_url            = (known after apply)
      + build_timeout        = 15
      + description          = "Build project for internet-banking-utility-payment-service in dev environment"
      + encryption_key       = (known after apply)
      + id                   = (known after apply)
      + name                 = "dev-internet-banking-utility-payment-service-build"
      + project_visibility   = "PRIVATE"
      + public_project_alias = (known after apply)
      + queued_timeout       = 480
      + service_role         = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + artifacts {
          + encryption_disabled    = false
          + override_artifact_name = false
          + type                   = "CODEPIPELINE"
        }

      + environment {
          + compute_type                = "BUILD_GENERAL1_SMALL"
          + image                       = "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
          + image_pull_credentials_type = "CODEBUILD"
          + privileged_mode             = true
          + type                        = "LINUX_CONTAINER"

          + environment_variable {
              + name  = "AWS_ACCOUNT_ID"
              + type  = "PLAINTEXT"
              + value = "156041437006"
            }
          + environment_variable {
              + name  = "AWS_REGION"
              + type  = "PLAINTEXT"
              + value = "us-east-1"
            }
          + environment_variable {
              + name  = "ECR_REPOSITORY_URI"
              + type  = "PLAINTEXT"
              + value = (known after apply)
            }
          + environment_variable {
              + name  = "ENVIRONMENT"
              + type  = "PLAINTEXT"
              + value = "dev"
            }
        }

      + logs_config {
          + cloudwatch_logs {
              + group_name  = "/codebuild/dev-internet-banking-utility-payment-service"
              + status      = "ENABLED"
              + stream_name = "build-log"
            }
        }

      + source {
          + buildspec = "buildspec.yml"
          + type      = "CODEPIPELINE"
        }
    }

  # module.internet_banking.module.codepipeline.aws_codebuild_project.service_builds["zipkin"] will be created
  + resource "aws_codebuild_project" "service_builds" {
      + arn                  = (known after apply)
      + badge_enabled        = false
      + badge_url            = (known after apply)
      + build_timeout        = 15
      + description          = "Build project for zipkin in dev environment"
      + encryption_key       = (known after apply)
      + id                   = (known after apply)
      + name                 = "dev-zipkin-build"
      + project_visibility   = "PRIVATE"
      + public_project_alias = (known after apply)
      + queued_timeout       = 480
      + service_role         = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + artifacts {
          + encryption_disabled    = false
          + override_artifact_name = false
          + type                   = "CODEPIPELINE"
        }

      + environment {
          + compute_type                = "BUILD_GENERAL1_SMALL"
          + image                       = "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
          + image_pull_credentials_type = "CODEBUILD"
          + privileged_mode             = true
          + type                        = "LINUX_CONTAINER"

          + environment_variable {
              + name  = "AWS_ACCOUNT_ID"
              + type  = "PLAINTEXT"
              + value = "156041437006"
            }
          + environment_variable {
              + name  = "AWS_REGION"
              + type  = "PLAINTEXT"
              + value = "us-east-1"
            }
          + environment_variable {
              + name  = "ECR_REPOSITORY_URI"
              + type  = "PLAINTEXT"
              + value = (known after apply)
            }
          + environment_variable {
              + name  = "ENVIRONMENT"
              + type  = "PLAINTEXT"
              + value = "dev"
            }
        }

      + logs_config {
          + cloudwatch_logs {
              + group_name  = "/codebuild/dev-zipkin"
              + status      = "ENABLED"
              + stream_name = "build-log"
            }
        }

      + source {
          + buildspec = "buildspec.yml"
          + type      = "CODEPIPELINE"
        }
    }

  # module.internet_banking.module.codepipeline.aws_codepipeline.service_pipelines["api_gateway"] will be created
  + resource "aws_codepipeline" "service_pipelines" {
      + arn            = (known after apply)
      + execution_mode = "SUPERSEDED"
      + id             = (known after apply)
      + name           = "dev-internet-banking-api-gateway-pipeline"
      + pipeline_type  = "V1"
      + role_arn       = (known after apply)
      + tags_all       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + trigger_all    = (known after apply)

      + artifact_store {
          + location = "dev-internet-banking-artifacts"
          + type     = "S3"
            # (1 unchanged attribute hidden)
        }

      + stage {
          + name = "Source"

          + action {
              + category         = "Source"
              + configuration    = {
                  + "BranchName"       = "main"
                  + "ConnectionArn"    = "arn:aws:codestar-connections:us-east-1:156041437006:connection/063c7eb0-7e04-4882-9a5a-810294a094cc"
                  + "FullRepositoryId" = "Olisaemeka111/internet-banking-app"
                }
              + name             = "Source"
              + output_artifacts = [
                  + "source_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeStarSourceConnection"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Build"

          + action {
              + category         = "Build"
              + configuration    = {
                  + "ProjectName" = "dev-internet-banking-api-gateway-build"
                }
              + input_artifacts  = [
                  + "source_output",
                ]
              + name             = "BuildAndPush"
              + output_artifacts = [
                  + "build_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeBuild"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Deploy"

          + action {
              + category        = "Deploy"
              + configuration   = {
                  + "ClusterName" = "dev-internet-banking-cluster"
                  + "FileName"    = "imagedefinitions.json"
                  + "ServiceName" = "dev-internet-banking-api-gateway"
                }
              + input_artifacts = [
                  + "build_output",
                ]
              + name            = "Deploy"
              + owner           = "AWS"
              + provider        = "ECS"
              + region          = (known after apply)
              + run_order       = (known after apply)
              + version         = "1"
            }
        }
    }

  # module.internet_banking.module.codepipeline.aws_codepipeline.service_pipelines["config_server"] will be created
  + resource "aws_codepipeline" "service_pipelines" {
      + arn            = (known after apply)
      + execution_mode = "SUPERSEDED"
      + id             = (known after apply)
      + name           = "dev-internet-banking-config-server-pipeline"
      + pipeline_type  = "V1"
      + role_arn       = (known after apply)
      + tags_all       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + trigger_all    = (known after apply)

      + artifact_store {
          + location = "dev-internet-banking-artifacts"
          + type     = "S3"
            # (1 unchanged attribute hidden)
        }

      + stage {
          + name = "Source"

          + action {
              + category         = "Source"
              + configuration    = {
                  + "BranchName"       = "main"
                  + "ConnectionArn"    = "arn:aws:codestar-connections:us-east-1:156041437006:connection/063c7eb0-7e04-4882-9a5a-810294a094cc"
                  + "FullRepositoryId" = "Olisaemeka111/internet-banking-app"
                }
              + name             = "Source"
              + output_artifacts = [
                  + "source_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeStarSourceConnection"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Build"

          + action {
              + category         = "Build"
              + configuration    = {
                  + "ProjectName" = "dev-internet-banking-config-server-build"
                }
              + input_artifacts  = [
                  + "source_output",
                ]
              + name             = "BuildAndPush"
              + output_artifacts = [
                  + "build_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeBuild"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Deploy"

          + action {
              + category        = "Deploy"
              + configuration   = {
                  + "ClusterName" = "dev-internet-banking-cluster"
                  + "FileName"    = "imagedefinitions.json"
                  + "ServiceName" = "dev-internet-banking-config-server"
                }
              + input_artifacts = [
                  + "build_output",
                ]
              + name            = "Deploy"
              + owner           = "AWS"
              + provider        = "ECS"
              + region          = (known after apply)
              + run_order       = (known after apply)
              + version         = "1"
            }
        }
    }

  # module.internet_banking.module.codepipeline.aws_codepipeline.service_pipelines["core_banking_service"] will be created
  + resource "aws_codepipeline" "service_pipelines" {
      + arn            = (known after apply)
      + execution_mode = "SUPERSEDED"
      + id             = (known after apply)
      + name           = "dev-core-banking-service-pipeline"
      + pipeline_type  = "V1"
      + role_arn       = (known after apply)
      + tags_all       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + trigger_all    = (known after apply)

      + artifact_store {
          + location = "dev-internet-banking-artifacts"
          + type     = "S3"
            # (1 unchanged attribute hidden)
        }

      + stage {
          + name = "Source"

          + action {
              + category         = "Source"
              + configuration    = {
                  + "BranchName"       = "main"
                  + "ConnectionArn"    = "arn:aws:codestar-connections:us-east-1:156041437006:connection/063c7eb0-7e04-4882-9a5a-810294a094cc"
                  + "FullRepositoryId" = "Olisaemeka111/internet-banking-app"
                }
              + name             = "Source"
              + output_artifacts = [
                  + "source_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeStarSourceConnection"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Build"

          + action {
              + category         = "Build"
              + configuration    = {
                  + "ProjectName" = "dev-core-banking-service-build"
                }
              + input_artifacts  = [
                  + "source_output",
                ]
              + name             = "BuildAndPush"
              + output_artifacts = [
                  + "build_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeBuild"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Deploy"

          + action {
              + category        = "Deploy"
              + configuration   = {
                  + "ClusterName" = "dev-internet-banking-cluster"
                  + "FileName"    = "imagedefinitions.json"
                  + "ServiceName" = "dev-core-banking-service"
                }
              + input_artifacts = [
                  + "build_output",
                ]
              + name            = "Deploy"
              + owner           = "AWS"
              + provider        = "ECS"
              + region          = (known after apply)
              + run_order       = (known after apply)
              + version         = "1"
            }
        }
    }

  # module.internet_banking.module.codepipeline.aws_codepipeline.service_pipelines["fund_transfer_service"] will be created
  + resource "aws_codepipeline" "service_pipelines" {
      + arn            = (known after apply)
      + execution_mode = "SUPERSEDED"
      + id             = (known after apply)
      + name           = "dev-internet-banking-fund-transfer-service-pipeline"
      + pipeline_type  = "V1"
      + role_arn       = (known after apply)
      + tags_all       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + trigger_all    = (known after apply)

      + artifact_store {
          + location = "dev-internet-banking-artifacts"
          + type     = "S3"
            # (1 unchanged attribute hidden)
        }

      + stage {
          + name = "Source"

          + action {
              + category         = "Source"
              + configuration    = {
                  + "BranchName"       = "main"
                  + "ConnectionArn"    = "arn:aws:codestar-connections:us-east-1:156041437006:connection/063c7eb0-7e04-4882-9a5a-810294a094cc"
                  + "FullRepositoryId" = "Olisaemeka111/internet-banking-app"
                }
              + name             = "Source"
              + output_artifacts = [
                  + "source_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeStarSourceConnection"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Build"

          + action {
              + category         = "Build"
              + configuration    = {
                  + "ProjectName" = "dev-internet-banking-fund-transfer-service-build"
                }
              + input_artifacts  = [
                  + "source_output",
                ]
              + name             = "BuildAndPush"
              + output_artifacts = [
                  + "build_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeBuild"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Deploy"

          + action {
              + category        = "Deploy"
              + configuration   = {
                  + "ClusterName" = "dev-internet-banking-cluster"
                  + "FileName"    = "imagedefinitions.json"
                  + "ServiceName" = "dev-internet-banking-fund-transfer-service"
                }
              + input_artifacts = [
                  + "build_output",
                ]
              + name            = "Deploy"
              + owner           = "AWS"
              + provider        = "ECS"
              + region          = (known after apply)
              + run_order       = (known after apply)
              + version         = "1"
            }
        }
    }

  # module.internet_banking.module.codepipeline.aws_codepipeline.service_pipelines["keycloak"] will be created
  + resource "aws_codepipeline" "service_pipelines" {
      + arn            = (known after apply)
      + execution_mode = "SUPERSEDED"
      + id             = (known after apply)
      + name           = "dev-keycloak-pipeline"
      + pipeline_type  = "V1"
      + role_arn       = (known after apply)
      + tags_all       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + trigger_all    = (known after apply)

      + artifact_store {
          + location = "dev-internet-banking-artifacts"
          + type     = "S3"
            # (1 unchanged attribute hidden)
        }

      + stage {
          + name = "Source"

          + action {
              + category         = "Source"
              + configuration    = {
                  + "BranchName"       = "main"
                  + "ConnectionArn"    = "arn:aws:codestar-connections:us-east-1:156041437006:connection/063c7eb0-7e04-4882-9a5a-810294a094cc"
                  + "FullRepositoryId" = "Olisaemeka111/internet-banking-app"
                }
              + name             = "Source"
              + output_artifacts = [
                  + "source_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeStarSourceConnection"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Build"

          + action {
              + category         = "Build"
              + configuration    = {
                  + "ProjectName" = "dev-keycloak-build"
                }
              + input_artifacts  = [
                  + "source_output",
                ]
              + name             = "BuildAndPush"
              + output_artifacts = [
                  + "build_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeBuild"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Deploy"

          + action {
              + category        = "Deploy"
              + configuration   = {
                  + "ClusterName" = "dev-internet-banking-cluster"
                  + "FileName"    = "imagedefinitions.json"
                  + "ServiceName" = "dev-keycloak"
                }
              + input_artifacts = [
                  + "build_output",
                ]
              + name            = "Deploy"
              + owner           = "AWS"
              + provider        = "ECS"
              + region          = (known after apply)
              + run_order       = (known after apply)
              + version         = "1"
            }
        }
    }

  # module.internet_banking.module.codepipeline.aws_codepipeline.service_pipelines["service_registry"] will be created
  + resource "aws_codepipeline" "service_pipelines" {
      + arn            = (known after apply)
      + execution_mode = "SUPERSEDED"
      + id             = (known after apply)
      + name           = "dev-internet-banking-service-registry-pipeline"
      + pipeline_type  = "V1"
      + role_arn       = (known after apply)
      + tags_all       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + trigger_all    = (known after apply)

      + artifact_store {
          + location = "dev-internet-banking-artifacts"
          + type     = "S3"
            # (1 unchanged attribute hidden)
        }

      + stage {
          + name = "Source"

          + action {
              + category         = "Source"
              + configuration    = {
                  + "BranchName"       = "main"
                  + "ConnectionArn"    = "arn:aws:codestar-connections:us-east-1:156041437006:connection/063c7eb0-7e04-4882-9a5a-810294a094cc"
                  + "FullRepositoryId" = "Olisaemeka111/internet-banking-app"
                }
              + name             = "Source"
              + output_artifacts = [
                  + "source_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeStarSourceConnection"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Build"

          + action {
              + category         = "Build"
              + configuration    = {
                  + "ProjectName" = "dev-internet-banking-service-registry-build"
                }
              + input_artifacts  = [
                  + "source_output",
                ]
              + name             = "BuildAndPush"
              + output_artifacts = [
                  + "build_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeBuild"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Deploy"

          + action {
              + category        = "Deploy"
              + configuration   = {
                  + "ClusterName" = "dev-internet-banking-cluster"
                  + "FileName"    = "imagedefinitions.json"
                  + "ServiceName" = "dev-internet-banking-service-registry"
                }
              + input_artifacts = [
                  + "build_output",
                ]
              + name            = "Deploy"
              + owner           = "AWS"
              + provider        = "ECS"
              + region          = (known after apply)
              + run_order       = (known after apply)
              + version         = "1"
            }
        }
    }

  # module.internet_banking.module.codepipeline.aws_codepipeline.service_pipelines["user_service"] will be created
  + resource "aws_codepipeline" "service_pipelines" {
      + arn            = (known after apply)
      + execution_mode = "SUPERSEDED"
      + id             = (known after apply)
      + name           = "dev-internet-banking-user-service-pipeline"
      + pipeline_type  = "V1"
      + role_arn       = (known after apply)
      + tags_all       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + trigger_all    = (known after apply)

      + artifact_store {
          + location = "dev-internet-banking-artifacts"
          + type     = "S3"
            # (1 unchanged attribute hidden)
        }

      + stage {
          + name = "Source"

          + action {
              + category         = "Source"
              + configuration    = {
                  + "BranchName"       = "main"
                  + "ConnectionArn"    = "arn:aws:codestar-connections:us-east-1:156041437006:connection/063c7eb0-7e04-4882-9a5a-810294a094cc"
                  + "FullRepositoryId" = "Olisaemeka111/internet-banking-app"
                }
              + name             = "Source"
              + output_artifacts = [
                  + "source_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeStarSourceConnection"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Build"

          + action {
              + category         = "Build"
              + configuration    = {
                  + "ProjectName" = "dev-internet-banking-user-service-build"
                }
              + input_artifacts  = [
                  + "source_output",
                ]
              + name             = "BuildAndPush"
              + output_artifacts = [
                  + "build_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeBuild"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Deploy"

          + action {
              + category        = "Deploy"
              + configuration   = {
                  + "ClusterName" = "dev-internet-banking-cluster"
                  + "FileName"    = "imagedefinitions.json"
                  + "ServiceName" = "dev-internet-banking-user-service"
                }
              + input_artifacts = [
                  + "build_output",
                ]
              + name            = "Deploy"
              + owner           = "AWS"
              + provider        = "ECS"
              + region          = (known after apply)
              + run_order       = (known after apply)
              + version         = "1"
            }
        }
    }

  # module.internet_banking.module.codepipeline.aws_codepipeline.service_pipelines["utility_payment_service"] will be created
  + resource "aws_codepipeline" "service_pipelines" {
      + arn            = (known after apply)
      + execution_mode = "SUPERSEDED"
      + id             = (known after apply)
      + name           = "dev-internet-banking-utility-payment-service-pipeline"
      + pipeline_type  = "V1"
      + role_arn       = (known after apply)
      + tags_all       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + trigger_all    = (known after apply)

      + artifact_store {
          + location = "dev-internet-banking-artifacts"
          + type     = "S3"
            # (1 unchanged attribute hidden)
        }

      + stage {
          + name = "Source"

          + action {
              + category         = "Source"
              + configuration    = {
                  + "BranchName"       = "main"
                  + "ConnectionArn"    = "arn:aws:codestar-connections:us-east-1:156041437006:connection/063c7eb0-7e04-4882-9a5a-810294a094cc"
                  + "FullRepositoryId" = "Olisaemeka111/internet-banking-app"
                }
              + name             = "Source"
              + output_artifacts = [
                  + "source_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeStarSourceConnection"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Build"

          + action {
              + category         = "Build"
              + configuration    = {
                  + "ProjectName" = "dev-internet-banking-utility-payment-service-build"
                }
              + input_artifacts  = [
                  + "source_output",
                ]
              + name             = "BuildAndPush"
              + output_artifacts = [
                  + "build_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeBuild"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Deploy"

          + action {
              + category        = "Deploy"
              + configuration   = {
                  + "ClusterName" = "dev-internet-banking-cluster"
                  + "FileName"    = "imagedefinitions.json"
                  + "ServiceName" = "dev-internet-banking-utility-payment-service"
                }
              + input_artifacts = [
                  + "build_output",
                ]
              + name            = "Deploy"
              + owner           = "AWS"
              + provider        = "ECS"
              + region          = (known after apply)
              + run_order       = (known after apply)
              + version         = "1"
            }
        }
    }

  # module.internet_banking.module.codepipeline.aws_codepipeline.service_pipelines["zipkin"] will be created
  + resource "aws_codepipeline" "service_pipelines" {
      + arn            = (known after apply)
      + execution_mode = "SUPERSEDED"
      + id             = (known after apply)
      + name           = "dev-zipkin-pipeline"
      + pipeline_type  = "V1"
      + role_arn       = (known after apply)
      + tags_all       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + trigger_all    = (known after apply)

      + artifact_store {
          + location = "dev-internet-banking-artifacts"
          + type     = "S3"
            # (1 unchanged attribute hidden)
        }

      + stage {
          + name = "Source"

          + action {
              + category         = "Source"
              + configuration    = {
                  + "BranchName"       = "main"
                  + "ConnectionArn"    = "arn:aws:codestar-connections:us-east-1:156041437006:connection/063c7eb0-7e04-4882-9a5a-810294a094cc"
                  + "FullRepositoryId" = "Olisaemeka111/internet-banking-app"
                }
              + name             = "Source"
              + output_artifacts = [
                  + "source_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeStarSourceConnection"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Build"

          + action {
              + category         = "Build"
              + configuration    = {
                  + "ProjectName" = "dev-zipkin-build"
                }
              + input_artifacts  = [
                  + "source_output",
                ]
              + name             = "BuildAndPush"
              + output_artifacts = [
                  + "build_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeBuild"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Deploy"

          + action {
              + category        = "Deploy"
              + configuration   = {
                  + "ClusterName" = "dev-internet-banking-cluster"
                  + "FileName"    = "imagedefinitions.json"
                  + "ServiceName" = "dev-zipkin"
                }
              + input_artifacts = [
                  + "build_output",
                ]
              + name            = "Deploy"
              + owner           = "AWS"
              + provider        = "ECS"
              + region          = (known after apply)
              + run_order       = (known after apply)
              + version         = "1"
            }
        }
    }

  # module.internet_banking.module.codepipeline.aws_ecr_repository.service_repositories["api_gateway"] will be created
  + resource "aws_ecr_repository" "service_repositories" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "internet-banking-api-gateway"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.internet_banking.module.codepipeline.aws_ecr_repository.service_repositories["config_server"] will be created
  + resource "aws_ecr_repository" "service_repositories" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "internet-banking-config-server"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.internet_banking.module.codepipeline.aws_ecr_repository.service_repositories["core_banking_service"] will be created
  + resource "aws_ecr_repository" "service_repositories" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "core-banking-service"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.internet_banking.module.codepipeline.aws_ecr_repository.service_repositories["fund_transfer_service"] will be created
  + resource "aws_ecr_repository" "service_repositories" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "internet-banking-fund-transfer-service"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.internet_banking.module.codepipeline.aws_ecr_repository.service_repositories["keycloak"] will be created
  + resource "aws_ecr_repository" "service_repositories" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "keycloak"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.internet_banking.module.codepipeline.aws_ecr_repository.service_repositories["service_registry"] will be created
  + resource "aws_ecr_repository" "service_repositories" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "internet-banking-service-registry"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.internet_banking.module.codepipeline.aws_ecr_repository.service_repositories["user_service"] will be created
  + resource "aws_ecr_repository" "service_repositories" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "internet-banking-user-service"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.internet_banking.module.codepipeline.aws_ecr_repository.service_repositories["utility_payment_service"] will be created
  + resource "aws_ecr_repository" "service_repositories" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "internet-banking-utility-payment-service"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.internet_banking.module.codepipeline.aws_ecr_repository.service_repositories["zipkin"] will be created
  + resource "aws_ecr_repository" "service_repositories" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "zipkin"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.internet_banking.module.codepipeline.aws_iam_policy.codepipeline_ecs_deployment_policy will be created
  + resource "aws_iam_policy" "codepipeline_ecs_deployment_policy" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + description      = "Policy for CodePipeline to deploy to ECS"
      + id               = (known after apply)
      + name             = "dev-codepipeline-ecs-deployment-policy"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ecs:DescribeServices",
                          + "ecs:DescribeTaskDefinition",
                          + "ecs:DescribeTasks",
                          + "ecs:ListTasks",
                          + "ecs:RegisterTaskDefinition",
                          + "ecs:UpdateService",
                          + "ecs:CreateService",
                          + "ecs:DeleteService",
                          + "ecs:ListServices",
                          + "ecs:ListTaskDefinitions",
                          + "ecs:ListClusters",
                          + "ecs:RunTask",
                          + "ecs:StopTask",
                          + "ecs:DeregisterTaskDefinition",
                          + "ecs:DescribeClusters",
                          + "ecs:CreateTaskSet",
                          + "ecs:UpdateTaskSet",
                          + "ecs:DeleteTaskSet",
                          + "ecs:UpdateClusterSettings",
                          + "ecs:PutClusterCapacityProviders",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = [
                          + "iam:PassRole",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id        = (known after apply)
      + tags_all         = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
    }

  # module.internet_banking.module.codepipeline.aws_iam_policy.ecs_deploy_action_policy will be created
  + resource "aws_iam_policy" "ecs_deploy_action_policy" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + description      = "Policy for ECS deployment actions in CodePipeline"
      + id               = (known after apply)
      + name             = "dev-ecs-deploy-action-policy"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ecs:DescribeServices",
                          + "ecs:DescribeTaskDefinition",
                          + "ecs:DescribeTasks",
                          + "ecs:ListTasks",
                          + "ecs:RegisterTaskDefinition",
                          + "ecs:UpdateService",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = [
                          + "iam:PassRole",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:iam::156041437006:role/dev-ecs-task-role",
                          + "arn:aws:iam::156041437006:role/dev-ecs-task-execution-role",
                        ]
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id        = (known after apply)
      + tags_all         = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
    }

  # module.internet_banking.module.codepipeline.aws_iam_role.codebuild_role will be created
  + resource "aws_iam_role" "codebuild_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "codebuild.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-internet-banking-codebuild-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.internet_banking.module.codepipeline.aws_iam_role.codepipeline_role will be created
  + resource "aws_iam_role" "codepipeline_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "codepipeline.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-internet-banking-codepipeline-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.internet_banking.module.codepipeline.aws_iam_role_policy.codebuild_policy will be created
  + resource "aws_iam_role_policy" "codebuild_policy" {
      + id          = (known after apply)
      + name        = "dev-internet-banking-codebuild-policy"
      + name_prefix = (known after apply)
      + policy      = (known after apply)
      + role        = (known after apply)
    }

  # module.internet_banking.module.codepipeline.aws_iam_role_policy.codepipeline_policy will be created
  + resource "aws_iam_role_policy" "codepipeline_policy" {
      + id          = (known after apply)
      + name        = "dev-internet-banking-codepipeline-policy"
      + name_prefix = (known after apply)
      + policy      = (known after apply)
      + role        = (known after apply)
    }

  # module.internet_banking.module.codepipeline.aws_iam_role_policy_attachment.codepipeline_ecs_deploy_action will be created
  + resource "aws_iam_role_policy_attachment" "codepipeline_ecs_deploy_action" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "dev-internet-banking-codepipeline-role"
    }

  # module.internet_banking.module.codepipeline.aws_iam_role_policy_attachment.codepipeline_ecs_deployment will be created
  + resource "aws_iam_role_policy_attachment" "codepipeline_ecs_deployment" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "dev-internet-banking-codepipeline-role"
    }

  # module.internet_banking.module.codepipeline.aws_iam_role_policy_attachment.codepipeline_ecs_full_access will be created
  + resource "aws_iam_role_policy_attachment" "codepipeline_ecs_full_access" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonECS_FullAccess"
      + role       = "dev-internet-banking-codepipeline-role"
    }

  # module.internet_banking.module.codepipeline.aws_s3_bucket.artifacts will be created
  + resource "aws_s3_bucket" "artifacts" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "dev-internet-banking-artifacts"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags_all                    = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.internet_banking.module.codepipeline.aws_s3_bucket_versioning.artifacts_versioning will be created
  + resource "aws_s3_bucket_versioning" "artifacts_versioning" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_policy.ecs_policy_cpu["api_gateway"] will be created
  + resource "aws_appautoscaling_policy" "ecs_policy_cpu" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "dev-internet-banking-api-gateway-cpu-autoscaling"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = "service/dev-internet-banking-cluster/dev-internet-banking-api-gateway"
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in   = false
          + scale_in_cooldown  = 300
          + scale_out_cooldown = 300
          + target_value       = 70

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageCPUUtilization"
            }
        }
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_policy.ecs_policy_cpu["config_server"] will be created
  + resource "aws_appautoscaling_policy" "ecs_policy_cpu" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "dev-internet-banking-config-server-cpu-autoscaling"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = "service/dev-internet-banking-cluster/dev-internet-banking-config-server"
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in   = false
          + scale_in_cooldown  = 300
          + scale_out_cooldown = 300
          + target_value       = 70

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageCPUUtilization"
            }
        }
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_policy.ecs_policy_cpu["core_banking_service"] will be created
  + resource "aws_appautoscaling_policy" "ecs_policy_cpu" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "dev-core-banking-service-cpu-autoscaling"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = "service/dev-internet-banking-cluster/dev-core-banking-service"
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in   = false
          + scale_in_cooldown  = 300
          + scale_out_cooldown = 300
          + target_value       = 70

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageCPUUtilization"
            }
        }
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_policy.ecs_policy_cpu["fund_transfer_service"] will be created
  + resource "aws_appautoscaling_policy" "ecs_policy_cpu" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "dev-internet-banking-fund-transfer-service-cpu-autoscaling"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = "service/dev-internet-banking-cluster/dev-internet-banking-fund-transfer-service"
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in   = false
          + scale_in_cooldown  = 300
          + scale_out_cooldown = 300
          + target_value       = 70

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageCPUUtilization"
            }
        }
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_policy.ecs_policy_cpu["keycloak"] will be created
  + resource "aws_appautoscaling_policy" "ecs_policy_cpu" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "dev-keycloak-cpu-autoscaling"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = "service/dev-internet-banking-cluster/dev-keycloak"
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in   = false
          + scale_in_cooldown  = 300
          + scale_out_cooldown = 300
          + target_value       = 70

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageCPUUtilization"
            }
        }
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_policy.ecs_policy_cpu["service_registry"] will be created
  + resource "aws_appautoscaling_policy" "ecs_policy_cpu" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "dev-internet-banking-service-registry-cpu-autoscaling"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = "service/dev-internet-banking-cluster/dev-internet-banking-service-registry"
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in   = false
          + scale_in_cooldown  = 300
          + scale_out_cooldown = 300
          + target_value       = 70

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageCPUUtilization"
            }
        }
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_policy.ecs_policy_cpu["user_service"] will be created
  + resource "aws_appautoscaling_policy" "ecs_policy_cpu" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "dev-internet-banking-user-service-cpu-autoscaling"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = "service/dev-internet-banking-cluster/dev-internet-banking-user-service"
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in   = false
          + scale_in_cooldown  = 300
          + scale_out_cooldown = 300
          + target_value       = 70

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageCPUUtilization"
            }
        }
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_policy.ecs_policy_cpu["utility_payment_service"] will be created
  + resource "aws_appautoscaling_policy" "ecs_policy_cpu" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "dev-internet-banking-utility-payment-service-cpu-autoscaling"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = "service/dev-internet-banking-cluster/dev-internet-banking-utility-payment-service"
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in   = false
          + scale_in_cooldown  = 300
          + scale_out_cooldown = 300
          + target_value       = 70

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageCPUUtilization"
            }
        }
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_policy.ecs_policy_cpu["zipkin"] will be created
  + resource "aws_appautoscaling_policy" "ecs_policy_cpu" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "dev-zipkin-cpu-autoscaling"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = "service/dev-internet-banking-cluster/dev-zipkin"
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in   = false
          + scale_in_cooldown  = 300
          + scale_out_cooldown = 300
          + target_value       = 70

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageCPUUtilization"
            }
        }
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_target.ecs_target["api_gateway"] will be created
  + resource "aws_appautoscaling_target" "ecs_target" {
      + arn                = (known after apply)
      + id                 = (known after apply)
      + max_capacity       = 4
      + min_capacity       = 2
      + resource_id        = "service/dev-internet-banking-cluster/dev-internet-banking-api-gateway"
      + role_arn           = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"
      + tags_all           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + suspended_state (known after apply)
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_target.ecs_target["config_server"] will be created
  + resource "aws_appautoscaling_target" "ecs_target" {
      + arn                = (known after apply)
      + id                 = (known after apply)
      + max_capacity       = 4
      + min_capacity       = 2
      + resource_id        = "service/dev-internet-banking-cluster/dev-internet-banking-config-server"
      + role_arn           = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"
      + tags_all           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + suspended_state (known after apply)
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_target.ecs_target["core_banking_service"] will be created
  + resource "aws_appautoscaling_target" "ecs_target" {
      + arn                = (known after apply)
      + id                 = (known after apply)
      + max_capacity       = 6
      + min_capacity       = 2
      + resource_id        = "service/dev-internet-banking-cluster/dev-core-banking-service"
      + role_arn           = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"
      + tags_all           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + suspended_state (known after apply)
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_target.ecs_target["fund_transfer_service"] will be created
  + resource "aws_appautoscaling_target" "ecs_target" {
      + arn                = (known after apply)
      + id                 = (known after apply)
      + max_capacity       = 6
      + min_capacity       = 2
      + resource_id        = "service/dev-internet-banking-cluster/dev-internet-banking-fund-transfer-service"
      + role_arn           = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"
      + tags_all           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + suspended_state (known after apply)
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_target.ecs_target["keycloak"] will be created
  + resource "aws_appautoscaling_target" "ecs_target" {
      + arn                = (known after apply)
      + id                 = (known after apply)
      + max_capacity       = 4
      + min_capacity       = 2
      + resource_id        = "service/dev-internet-banking-cluster/dev-keycloak"
      + role_arn           = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"
      + tags_all           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + suspended_state (known after apply)
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_target.ecs_target["service_registry"] will be created
  + resource "aws_appautoscaling_target" "ecs_target" {
      + arn                = (known after apply)
      + id                 = (known after apply)
      + max_capacity       = 4
      + min_capacity       = 2
      + resource_id        = "service/dev-internet-banking-cluster/dev-internet-banking-service-registry"
      + role_arn           = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"
      + tags_all           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + suspended_state (known after apply)
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_target.ecs_target["user_service"] will be created
  + resource "aws_appautoscaling_target" "ecs_target" {
      + arn                = (known after apply)
      + id                 = (known after apply)
      + max_capacity       = 6
      + min_capacity       = 2
      + resource_id        = "service/dev-internet-banking-cluster/dev-internet-banking-user-service"
      + role_arn           = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"
      + tags_all           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + suspended_state (known after apply)
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_target.ecs_target["utility_payment_service"] will be created
  + resource "aws_appautoscaling_target" "ecs_target" {
      + arn                = (known after apply)
      + id                 = (known after apply)
      + max_capacity       = 6
      + min_capacity       = 2
      + resource_id        = "service/dev-internet-banking-cluster/dev-internet-banking-utility-payment-service"
      + role_arn           = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"
      + tags_all           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + suspended_state (known after apply)
    }

  # module.internet_banking.module.ecs.aws_appautoscaling_target.ecs_target["zipkin"] will be created
  + resource "aws_appautoscaling_target" "ecs_target" {
      + arn                = (known after apply)
      + id                 = (known after apply)
      + max_capacity       = 2
      + min_capacity       = 1
      + resource_id        = "service/dev-internet-banking-cluster/dev-zipkin"
      + role_arn           = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"
      + tags_all           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + suspended_state (known after apply)
    }

  # module.internet_banking.module.ecs.aws_cloudwatch_log_group.ecs_services["api_gateway"] will be created
  + resource "aws_cloudwatch_log_group" "ecs_services" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/internet-banking-api-gateway"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/internet-banking-api-gateway"
          + "Service"     = "internet-banking-api-gateway"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/internet-banking-api-gateway"
          + "Project"     = "Internet-Banking"
          + "Service"     = "internet-banking-api-gateway"
        }
    }

  # module.internet_banking.module.ecs.aws_cloudwatch_log_group.ecs_services["config_server"] will be created
  + resource "aws_cloudwatch_log_group" "ecs_services" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/internet-banking-config-server"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/internet-banking-config-server"
          + "Service"     = "internet-banking-config-server"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/internet-banking-config-server"
          + "Project"     = "Internet-Banking"
          + "Service"     = "internet-banking-config-server"
        }
    }

  # module.internet_banking.module.ecs.aws_cloudwatch_log_group.ecs_services["core_banking_service"] will be created
  + resource "aws_cloudwatch_log_group" "ecs_services" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/core-banking-service"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/core-banking-service"
          + "Service"     = "core-banking-service"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/core-banking-service"
          + "Project"     = "Internet-Banking"
          + "Service"     = "core-banking-service"
        }
    }

  # module.internet_banking.module.ecs.aws_cloudwatch_log_group.ecs_services["fund_transfer_service"] will be created
  + resource "aws_cloudwatch_log_group" "ecs_services" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/internet-banking-fund-transfer-service"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/internet-banking-fund-transfer-service"
          + "Service"     = "internet-banking-fund-transfer-service"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/internet-banking-fund-transfer-service"
          + "Project"     = "Internet-Banking"
          + "Service"     = "internet-banking-fund-transfer-service"
        }
    }

  # module.internet_banking.module.ecs.aws_cloudwatch_log_group.ecs_services["keycloak"] will be created
  + resource "aws_cloudwatch_log_group" "ecs_services" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/keycloak"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/keycloak"
          + "Service"     = "keycloak"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/keycloak"
          + "Project"     = "Internet-Banking"
          + "Service"     = "keycloak"
        }
    }

  # module.internet_banking.module.ecs.aws_cloudwatch_log_group.ecs_services["service_registry"] will be created
  + resource "aws_cloudwatch_log_group" "ecs_services" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/internet-banking-service-registry"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/internet-banking-service-registry"
          + "Service"     = "internet-banking-service-registry"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/internet-banking-service-registry"
          + "Project"     = "Internet-Banking"
          + "Service"     = "internet-banking-service-registry"
        }
    }

  # module.internet_banking.module.ecs.aws_cloudwatch_log_group.ecs_services["user_service"] will be created
  + resource "aws_cloudwatch_log_group" "ecs_services" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/internet-banking-user-service"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/internet-banking-user-service"
          + "Service"     = "internet-banking-user-service"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/internet-banking-user-service"
          + "Project"     = "Internet-Banking"
          + "Service"     = "internet-banking-user-service"
        }
    }

  # module.internet_banking.module.ecs.aws_cloudwatch_log_group.ecs_services["utility_payment_service"] will be created
  + resource "aws_cloudwatch_log_group" "ecs_services" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/internet-banking-utility-payment-service"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/internet-banking-utility-payment-service"
          + "Service"     = "internet-banking-utility-payment-service"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/internet-banking-utility-payment-service"
          + "Project"     = "Internet-Banking"
          + "Service"     = "internet-banking-utility-payment-service"
        }
    }

  # module.internet_banking.module.ecs.aws_cloudwatch_log_group.ecs_services["zipkin"] will be created
  + resource "aws_cloudwatch_log_group" "ecs_services" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/zipkin"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/zipkin"
          + "Service"     = "zipkin"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/zipkin"
          + "Project"     = "Internet-Banking"
          + "Service"     = "zipkin"
        }
    }

  # module.internet_banking.module.ecs.aws_ecs_cluster.main will be created
  + resource "aws_ecs_cluster" "main" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + name     = "dev-internet-banking-cluster"
      + tags     = {
          + "Name" = "dev-internet-banking-cluster"
        }
      + tags_all = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-cluster"
          + "Project"     = "Internet-Banking"
        }

      + setting {
          + name  = "containerInsights"
          + value = "enabled"
        }
    }

  # module.internet_banking.module.ecs.aws_ecs_cluster_capacity_providers.main will be created
  + resource "aws_ecs_cluster_capacity_providers" "main" {
      + capacity_providers = [
          + "FARGATE",
          + "FARGATE_SPOT",
        ]
      + cluster_name       = "dev-internet-banking-cluster"
      + id                 = (known after apply)

      + default_capacity_provider_strategy {
          + base              = 1
          + capacity_provider = "FARGATE"
          + weight            = 1
        }
    }

  # module.internet_banking.module.ecs.aws_ecs_service.private["config_server"] will be created
  + resource "aws_ecs_service" "private" {
      + availability_zone_rebalancing      = "DISABLED"
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 50
      + desired_count                      = 2
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + health_check_grace_period_seconds  = 300
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "dev-internet-banking-config-server"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags                               = {
          + "Name" = "dev-internet-banking-config-server-service"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-config-server-service"
          + "Project"     = "Internet-Banking"
        }
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + load_balancer {
          + container_name   = "internet-banking-config-server"
          + container_port   = 8090
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = false
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }
    }

  # module.internet_banking.module.ecs.aws_ecs_service.private["core_banking_service"] will be created
  + resource "aws_ecs_service" "private" {
      + availability_zone_rebalancing      = "DISABLED"
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 50
      + desired_count                      = 2
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + health_check_grace_period_seconds  = 300
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "dev-core-banking-service"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags                               = {
          + "Name" = "dev-core-banking-service-service"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-core-banking-service-service"
          + "Project"     = "Internet-Banking"
        }
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + load_balancer {
          + container_name   = "core-banking-service"
          + container_port   = 8092
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = false
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }
    }

  # module.internet_banking.module.ecs.aws_ecs_service.private["fund_transfer_service"] will be created
  + resource "aws_ecs_service" "private" {
      + availability_zone_rebalancing      = "DISABLED"
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 50
      + desired_count                      = 2
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + health_check_grace_period_seconds  = 300
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "dev-internet-banking-fund-transfer-service"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags                               = {
          + "Name" = "dev-internet-banking-fund-transfer-service-service"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-fund-transfer-service-service"
          + "Project"     = "Internet-Banking"
        }
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + load_balancer {
          + container_name   = "internet-banking-fund-transfer-service"
          + container_port   = 8084
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = false
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }
    }

  # module.internet_banking.module.ecs.aws_ecs_service.private["keycloak"] will be created
  + resource "aws_ecs_service" "private" {
      + availability_zone_rebalancing      = "DISABLED"
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 50
      + desired_count                      = 2
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + health_check_grace_period_seconds  = 300
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "dev-keycloak"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags                               = {
          + "Name" = "dev-keycloak-service"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-keycloak-service"
          + "Project"     = "Internet-Banking"
        }
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + load_balancer {
          + container_name   = "keycloak"
          + container_port   = 8080
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = false
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }
    }

  # module.internet_banking.module.ecs.aws_ecs_service.private["service_registry"] will be created
  + resource "aws_ecs_service" "private" {
      + availability_zone_rebalancing      = "DISABLED"
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 50
      + desired_count                      = 2
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + health_check_grace_period_seconds  = 300
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "dev-internet-banking-service-registry"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags                               = {
          + "Name" = "dev-internet-banking-service-registry-service"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-service-registry-service"
          + "Project"     = "Internet-Banking"
        }
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + load_balancer {
          + container_name   = "internet-banking-service-registry"
          + container_port   = 8081
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = false
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }
    }

  # module.internet_banking.module.ecs.aws_ecs_service.private["user_service"] will be created
  + resource "aws_ecs_service" "private" {
      + availability_zone_rebalancing      = "DISABLED"
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 50
      + desired_count                      = 2
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + health_check_grace_period_seconds  = 300
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "dev-internet-banking-user-service"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags                               = {
          + "Name" = "dev-internet-banking-user-service-service"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-user-service-service"
          + "Project"     = "Internet-Banking"
        }
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + load_balancer {
          + container_name   = "internet-banking-user-service"
          + container_port   = 8083
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = false
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }
    }

  # module.internet_banking.module.ecs.aws_ecs_service.private["utility_payment_service"] will be created
  + resource "aws_ecs_service" "private" {
      + availability_zone_rebalancing      = "DISABLED"
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 50
      + desired_count                      = 2
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + health_check_grace_period_seconds  = 300
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "dev-internet-banking-utility-payment-service"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags                               = {
          + "Name" = "dev-internet-banking-utility-payment-service-service"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-utility-payment-service-service"
          + "Project"     = "Internet-Banking"
        }
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + load_balancer {
          + container_name   = "internet-banking-utility-payment-service"
          + container_port   = 8085
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = false
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }
    }

  # module.internet_banking.module.ecs.aws_ecs_service.private["zipkin"] will be created
  + resource "aws_ecs_service" "private" {
      + availability_zone_rebalancing      = "DISABLED"
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 50
      + desired_count                      = 1
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + health_check_grace_period_seconds  = 300
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "dev-zipkin"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags                               = {
          + "Name" = "dev-zipkin-service"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-zipkin-service"
          + "Project"     = "Internet-Banking"
        }
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + load_balancer {
          + container_name   = "zipkin"
          + container_port   = 9411
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = false
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }
    }

  # module.internet_banking.module.ecs.aws_ecs_service.public["api_gateway"] will be created
  + resource "aws_ecs_service" "public" {
      + availability_zone_rebalancing      = "DISABLED"
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 50
      + desired_count                      = 2
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + health_check_grace_period_seconds  = 300
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "dev-internet-banking-api-gateway"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags                               = {
          + "Name" = "dev-internet-banking-api-gateway-service"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-api-gateway-service"
          + "Project"     = "Internet-Banking"
        }
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + load_balancer {
          + container_name   = "internet-banking-api-gateway"
          + container_port   = 8082
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = false
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }
    }

  # module.internet_banking.module.ecs.aws_ecs_task_definition.services["api_gateway"] will be created
  + resource "aws_ecs_task_definition" "services" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = (known after apply)
      + cpu                      = "512"
      + enable_fault_injection   = (known after apply)
      + execution_role_arn       = (known after apply)
      + family                   = "dev-internet-banking-api-gateway"
      + id                       = (known after apply)
      + memory                   = "1024"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags                     = {
          + "Name" = "dev-internet-banking-api-gateway-task"
        }
      + tags_all                 = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-api-gateway-task"
          + "Project"     = "Internet-Banking"
        }
      + task_role_arn            = (known after apply)
      + track_latest             = false
    }

  # module.internet_banking.module.ecs.aws_ecs_task_definition.services["config_server"] will be created
  + resource "aws_ecs_task_definition" "services" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = (known after apply)
      + cpu                      = "256"
      + enable_fault_injection   = (known after apply)
      + execution_role_arn       = (known after apply)
      + family                   = "dev-internet-banking-config-server"
      + id                       = (known after apply)
      + memory                   = "512"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags                     = {
          + "Name" = "dev-internet-banking-config-server-task"
        }
      + tags_all                 = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-config-server-task"
          + "Project"     = "Internet-Banking"
        }
      + task_role_arn            = (known after apply)
      + track_latest             = false
    }

  # module.internet_banking.module.ecs.aws_ecs_task_definition.services["core_banking_service"] will be created
  + resource "aws_ecs_task_definition" "services" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = (known after apply)
      + cpu                      = "1024"
      + enable_fault_injection   = (known after apply)
      + execution_role_arn       = (known after apply)
      + family                   = "dev-core-banking-service"
      + id                       = (known after apply)
      + memory                   = "2048"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags                     = {
          + "Name" = "dev-core-banking-service-task"
        }
      + tags_all                 = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-core-banking-service-task"
          + "Project"     = "Internet-Banking"
        }
      + task_role_arn            = (known after apply)
      + track_latest             = false
    }

  # module.internet_banking.module.ecs.aws_ecs_task_definition.services["fund_transfer_service"] will be created
  + resource "aws_ecs_task_definition" "services" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = (known after apply)
      + cpu                      = "1024"
      + enable_fault_injection   = (known after apply)
      + execution_role_arn       = (known after apply)
      + family                   = "dev-internet-banking-fund-transfer-service"
      + id                       = (known after apply)
      + memory                   = "2048"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags                     = {
          + "Name" = "dev-internet-banking-fund-transfer-service-task"
        }
      + tags_all                 = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-fund-transfer-service-task"
          + "Project"     = "Internet-Banking"
        }
      + task_role_arn            = (known after apply)
      + track_latest             = false
    }

  # module.internet_banking.module.ecs.aws_ecs_task_definition.services["keycloak"] will be created
  + resource "aws_ecs_task_definition" "services" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = (known after apply)
      + cpu                      = "2048"
      + enable_fault_injection   = (known after apply)
      + execution_role_arn       = (known after apply)
      + family                   = "dev-keycloak"
      + id                       = (known after apply)
      + memory                   = "4096"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags                     = {
          + "Name" = "dev-keycloak-task"
        }
      + tags_all                 = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-keycloak-task"
          + "Project"     = "Internet-Banking"
        }
      + task_role_arn            = (known after apply)
      + track_latest             = false
    }

  # module.internet_banking.module.ecs.aws_ecs_task_definition.services["service_registry"] will be created
  + resource "aws_ecs_task_definition" "services" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = (known after apply)
      + cpu                      = "256"
      + enable_fault_injection   = (known after apply)
      + execution_role_arn       = (known after apply)
      + family                   = "dev-internet-banking-service-registry"
      + id                       = (known after apply)
      + memory                   = "512"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags                     = {
          + "Name" = "dev-internet-banking-service-registry-task"
        }
      + tags_all                 = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-service-registry-task"
          + "Project"     = "Internet-Banking"
        }
      + task_role_arn            = (known after apply)
      + track_latest             = false
    }

  # module.internet_banking.module.ecs.aws_ecs_task_definition.services["user_service"] will be created
  + resource "aws_ecs_task_definition" "services" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = (known after apply)
      + cpu                      = "1024"
      + enable_fault_injection   = (known after apply)
      + execution_role_arn       = (known after apply)
      + family                   = "dev-internet-banking-user-service"
      + id                       = (known after apply)
      + memory                   = "2048"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags                     = {
          + "Name" = "dev-internet-banking-user-service-task"
        }
      + tags_all                 = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-user-service-task"
          + "Project"     = "Internet-Banking"
        }
      + task_role_arn            = (known after apply)
      + track_latest             = false
    }

  # module.internet_banking.module.ecs.aws_ecs_task_definition.services["utility_payment_service"] will be created
  + resource "aws_ecs_task_definition" "services" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = (known after apply)
      + cpu                      = "1024"
      + enable_fault_injection   = (known after apply)
      + execution_role_arn       = (known after apply)
      + family                   = "dev-internet-banking-utility-payment-service"
      + id                       = (known after apply)
      + memory                   = "2048"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags                     = {
          + "Name" = "dev-internet-banking-utility-payment-service-task"
        }
      + tags_all                 = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-utility-payment-service-task"
          + "Project"     = "Internet-Banking"
        }
      + task_role_arn            = (known after apply)
      + track_latest             = false
    }

  # module.internet_banking.module.ecs.aws_ecs_task_definition.services["zipkin"] will be created
  + resource "aws_ecs_task_definition" "services" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = (known after apply)
      + cpu                      = "512"
      + enable_fault_injection   = (known after apply)
      + execution_role_arn       = (known after apply)
      + family                   = "dev-zipkin"
      + id                       = (known after apply)
      + memory                   = "1024"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags                     = {
          + "Name" = "dev-zipkin-task"
        }
      + tags_all                 = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-zipkin-task"
          + "Project"     = "Internet-Banking"
        }
      + task_role_arn            = (known after apply)
      + track_latest             = false
    }

  # module.internet_banking.module.ecs.aws_iam_policy.ecs_task_enhanced_policy will be created
  + resource "aws_iam_policy" "ecs_task_enhanced_policy" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + description      = "Enhanced policy for ECS task role with additional permissions"
      + id               = (known after apply)
      + name             = "dev-ecs-task-enhanced-policy"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ssm:GetParameters",
                          + "secretsmanager:GetSecretValue",
                          + "kms:Decrypt",
                          + "ecr:GetAuthorizationToken",
                          + "ecr:BatchCheckLayerAvailability",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id        = (known after apply)
      + tags_all         = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
    }

  # module.internet_banking.module.ecs.aws_iam_policy.ecs_task_execution_enhanced_policy will be created
  + resource "aws_iam_policy" "ecs_task_execution_enhanced_policy" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + description      = "Enhanced policy for ECS task execution role to pull images from ECR and write logs to CloudWatch"
      + id               = (known after apply)
      + name             = "dev-ecs-task-execution-enhanced-policy"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ecr:GetAuthorizationToken",
                          + "ecr:BatchCheckLayerAvailability",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "logs:CreateLogStream",
                          + "logs:PutLogEvents",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id        = (known after apply)
      + tags_all         = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
    }

  # module.internet_banking.module.ecs.aws_iam_policy.ecs_task_policy will be created
  + resource "aws_iam_policy" "ecs_task_policy" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + description      = "Policy for ECS tasks"
      + id               = (known after apply)
      + name             = "dev-ecs-task-policy"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ssm:GetParameters",
                          + "secretsmanager:GetSecretValue",
                          + "kms:Decrypt",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id        = (known after apply)
      + tags_all         = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
    }

  # module.internet_banking.module.ecs.aws_iam_role.ecs_task_execution_role will be created
  + resource "aws_iam_role" "ecs_task_execution_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-ecs-task-execution-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.internet_banking.module.ecs.aws_iam_role.ecs_task_role will be created
  + resource "aws_iam_role" "ecs_task_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-ecs-task-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.internet_banking.module.ecs.aws_iam_role_policy_attachment.ecs_task_enhanced_policy_attachment will be created
  + resource "aws_iam_role_policy_attachment" "ecs_task_enhanced_policy_attachment" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "dev-ecs-task-role"
    }

  # module.internet_banking.module.ecs.aws_iam_role_policy_attachment.ecs_task_execution_enhanced_policy_attachment will be created
  + resource "aws_iam_role_policy_attachment" "ecs_task_execution_enhanced_policy_attachment" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "dev-ecs-task-execution-role"
    }

  # module.internet_banking.module.ecs.aws_iam_role_policy_attachment.ecs_task_execution_role_policy will be created
  + resource "aws_iam_role_policy_attachment" "ecs_task_execution_role_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      + role       = "dev-ecs-task-execution-role"
    }

  # module.internet_banking.module.ecs.aws_iam_role_policy_attachment.ecs_task_role_policy will be created
  + resource "aws_iam_role_policy_attachment" "ecs_task_role_policy" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "dev-ecs-task-role"
    }

  # module.internet_banking.module.ecs.aws_lb.internal will be created
  + resource "aws_lb" "internal" {
      + arn                                                          = (known after apply)
      + arn_suffix                                                   = (known after apply)
      + client_keep_alive                                            = 3600
      + desync_mitigation_mode                                       = "defensive"
      + dns_name                                                     = (known after apply)
      + drop_invalid_header_fields                                   = false
      + enable_deletion_protection                                   = false
      + enable_http2                                                 = true
      + enable_tls_version_and_cipher_suite_headers                  = false
      + enable_waf_fail_open                                         = false
      + enable_xff_client_port                                       = false
      + enable_zonal_shift                                           = false
      + enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      + id                                                           = (known after apply)
      + idle_timeout                                                 = 60
      + internal                                                     = true
      + ip_address_type                                              = (known after apply)
      + load_balancer_type                                           = "application"
      + name                                                         = "dev-internal-alb"
      + name_prefix                                                  = (known after apply)
      + preserve_host_header                                         = false
      + security_groups                                              = (known after apply)
      + subnets                                                      = (known after apply)
      + tags                                                         = {
          + "Name" = "dev-internal-alb"
        }
      + tags_all                                                     = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internal-alb"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id                                                       = (known after apply)
      + xff_header_processing_mode                                   = "append"
      + zone_id                                                      = (known after apply)

      + subnet_mapping (known after apply)
    }

  # module.internet_banking.module.ecs.aws_lb.network will be created
  + resource "aws_lb" "network" {
      + arn                                                          = (known after apply)
      + arn_suffix                                                   = (known after apply)
      + dns_name                                                     = (known after apply)
      + dns_record_client_routing_policy                             = "any_availability_zone"
      + enable_cross_zone_load_balancing                             = false
      + enable_deletion_protection                                   = false
      + enable_zonal_shift                                           = false
      + enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      + id                                                           = (known after apply)
      + internal                                                     = true
      + ip_address_type                                              = (known after apply)
      + load_balancer_type                                           = "network"
      + name                                                         = "dev-network-lb"
      + name_prefix                                                  = (known after apply)
      + security_groups                                              = (known after apply)
      + subnets                                                      = (known after apply)
      + tags                                                         = {
          + "Environment" = "dev"
          + "Name"        = "dev-network-lb"
        }
      + tags_all                                                     = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-network-lb"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id                                                       = (known after apply)
      + zone_id                                                      = (known after apply)

      + subnet_mapping (known after apply)
    }

  # module.internet_banking.module.ecs.aws_lb.public will be created
  + resource "aws_lb" "public" {
      + arn                                                          = (known after apply)
      + arn_suffix                                                   = (known after apply)
      + client_keep_alive                                            = 3600
      + desync_mitigation_mode                                       = "defensive"
      + dns_name                                                     = (known after apply)
      + drop_invalid_header_fields                                   = false
      + enable_deletion_protection                                   = false
      + enable_http2                                                 = true
      + enable_tls_version_and_cipher_suite_headers                  = false
      + enable_waf_fail_open                                         = false
      + enable_xff_client_port                                       = false
      + enable_zonal_shift                                           = false
      + enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      + id                                                           = (known after apply)
      + idle_timeout                                                 = 60
      + internal                                                     = false
      + ip_address_type                                              = (known after apply)
      + load_balancer_type                                           = "application"
      + name                                                         = "dev-public-alb"
      + name_prefix                                                  = (known after apply)
      + preserve_host_header                                         = false
      + security_groups                                              = (known after apply)
      + subnets                                                      = (known after apply)
      + tags                                                         = {
          + "Name" = "dev-public-alb"
        }
      + tags_all                                                     = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-public-alb"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id                                                       = (known after apply)
      + xff_header_processing_mode                                   = "append"
      + zone_id                                                      = (known after apply)

      + subnet_mapping (known after apply)
    }

  # module.internet_banking.module.ecs.aws_lb_listener.internal will be created
  + resource "aws_lb_listener" "internal" {
      + arn                                                                   = (known after apply)
      + id                                                                    = (known after apply)
      + load_balancer_arn                                                     = (known after apply)
      + port                                                                  = 80
      + protocol                                                              = "HTTP"
      + routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      + routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      + routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      + routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      + routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      + routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      + routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      + routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      + routing_http_response_access_control_max_age_header_value             = (known after apply)
      + routing_http_response_content_security_policy_header_value            = (known after apply)
      + routing_http_response_server_enabled                                  = (known after apply)
      + routing_http_response_strict_transport_security_header_value          = (known after apply)
      + routing_http_response_x_content_type_options_header_value             = (known after apply)
      + routing_http_response_x_frame_options_header_value                    = (known after apply)
      + ssl_policy                                                            = (known after apply)
      + tags_all                                                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + tcp_idle_timeout_seconds                                              = (known after apply)

      + default_action {
          + order = (known after apply)
          + type  = "fixed-response"

          + fixed_response {
              + content_type = "text/plain"
              + message_body = "Not Found"
              + status_code  = "404"
            }
        }

      + mutual_authentication (known after apply)
    }

  # module.internet_banking.module.ecs.aws_lb_listener.public_http will be created
  + resource "aws_lb_listener" "public_http" {
      + arn                                                                   = (known after apply)
      + id                                                                    = (known after apply)
      + load_balancer_arn                                                     = (known after apply)
      + port                                                                  = 80
      + protocol                                                              = "HTTP"
      + routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      + routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      + routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      + routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      + routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      + routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      + routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      + routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      + routing_http_response_access_control_max_age_header_value             = (known after apply)
      + routing_http_response_content_security_policy_header_value            = (known after apply)
      + routing_http_response_server_enabled                                  = (known after apply)
      + routing_http_response_strict_transport_security_header_value          = (known after apply)
      + routing_http_response_x_content_type_options_header_value             = (known after apply)
      + routing_http_response_x_frame_options_header_value                    = (known after apply)
      + ssl_policy                                                            = (known after apply)
      + tags_all                                                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + tcp_idle_timeout_seconds                                              = (known after apply)

      + default_action {
          + order = (known after apply)
          + type  = "redirect"

          + redirect {
              + host        = "#{host}"
              + path        = "/#{path}"
              + port        = "443"
              + protocol    = "HTTPS"
              + query       = "#{query}"
              + status_code = "HTTP_301"
            }
        }

      + mutual_authentication (known after apply)
    }

  # module.internet_banking.module.ecs.aws_lb_listener_rule.private["config_server"] will be created
  + resource "aws_lb_listener_rule" "private" {
      + arn          = (known after apply)
      + id           = (known after apply)
      + listener_arn = (known after apply)
      + priority     = 100
      + tags_all     = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + condition {
          + path_pattern {
              + values = [
                  + "/config_server/*",
                ]
            }
        }
    }

  # module.internet_banking.module.ecs.aws_lb_listener_rule.private["core_banking_service"] will be created
  + resource "aws_lb_listener_rule" "private" {
      + arn          = (known after apply)
      + id           = (known after apply)
      + listener_arn = (known after apply)
      + priority     = 101
      + tags_all     = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + condition {
          + path_pattern {
              + values = [
                  + "/core_banking_service/*",
                ]
            }
        }
    }

  # module.internet_banking.module.ecs.aws_lb_listener_rule.private["fund_transfer_service"] will be created
  + resource "aws_lb_listener_rule" "private" {
      + arn          = (known after apply)
      + id           = (known after apply)
      + listener_arn = (known after apply)
      + priority     = 102
      + tags_all     = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + condition {
          + path_pattern {
              + values = [
                  + "/fund_transfer_service/*",
                ]
            }
        }
    }

  # module.internet_banking.module.ecs.aws_lb_listener_rule.private["keycloak"] will be created
  + resource "aws_lb_listener_rule" "private" {
      + arn          = (known after apply)
      + id           = (known after apply)
      + listener_arn = (known after apply)
      + priority     = 103
      + tags_all     = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + condition {
          + path_pattern {
              + values = [
                  + "/keycloak/*",
                ]
            }
        }
    }

  # module.internet_banking.module.ecs.aws_lb_listener_rule.private["service_registry"] will be created
  + resource "aws_lb_listener_rule" "private" {
      + arn          = (known after apply)
      + id           = (known after apply)
      + listener_arn = (known after apply)
      + priority     = 104
      + tags_all     = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + condition {
          + path_pattern {
              + values = [
                  + "/service_registry/*",
                ]
            }
        }
    }

  # module.internet_banking.module.ecs.aws_lb_listener_rule.private["user_service"] will be created
  + resource "aws_lb_listener_rule" "private" {
      + arn          = (known after apply)
      + id           = (known after apply)
      + listener_arn = (known after apply)
      + priority     = 105
      + tags_all     = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + condition {
          + path_pattern {
              + values = [
                  + "/user_service/*",
                ]
            }
        }
    }

  # module.internet_banking.module.ecs.aws_lb_listener_rule.private["utility_payment_service"] will be created
  + resource "aws_lb_listener_rule" "private" {
      + arn          = (known after apply)
      + id           = (known after apply)
      + listener_arn = (known after apply)
      + priority     = 106
      + tags_all     = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + condition {
          + path_pattern {
              + values = [
                  + "/utility_payment_service/*",
                ]
            }
        }
    }

  # module.internet_banking.module.ecs.aws_lb_listener_rule.private["zipkin"] will be created
  + resource "aws_lb_listener_rule" "private" {
      + arn          = (known after apply)
      + id           = (known after apply)
      + listener_arn = (known after apply)
      + priority     = 107
      + tags_all     = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + condition {
          + path_pattern {
              + values = [
                  + "/zipkin/*",
                ]
            }
        }
    }

  # module.internet_banking.module.ecs.aws_lb_listener_rule.public["api_gateway"] will be created
  + resource "aws_lb_listener_rule" "public" {
      + arn          = (known after apply)
      + id           = (known after apply)
      + listener_arn = (known after apply)
      + priority     = 100
      + tags_all     = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + condition {
          + path_pattern {
              + values = [
                  + "/api_gateway/*",
                ]
            }
        }
    }

  # module.internet_banking.module.ecs.aws_lb_target_group.private["config_server"] will be created
  + resource "aws_lb_target_group" "private" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "dev-config-server-tg"
      + name_prefix                        = (known after apply)
      + port                               = 8090
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Name" = "dev-internet-banking-config-server-tg"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-config-server-tg"
          + "Project"     = "Internet-Banking"
        }
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 30
          + matcher             = "200"
          + path                = "/actuator/health"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 3
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # module.internet_banking.module.ecs.aws_lb_target_group.private["core_banking_service"] will be created
  + resource "aws_lb_target_group" "private" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "dev-core-banking-service-tg"
      + name_prefix                        = (known after apply)
      + port                               = 8092
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Name" = "dev-core-banking-service-tg"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-core-banking-service-tg"
          + "Project"     = "Internet-Banking"
        }
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 30
          + matcher             = "200"
          + path                = "/actuator/health"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 3
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # module.internet_banking.module.ecs.aws_lb_target_group.private["fund_transfer_service"] will be created
  + resource "aws_lb_target_group" "private" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "dev-fund-transfer-service-tg"
      + name_prefix                        = (known after apply)
      + port                               = 8084
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Name" = "dev-internet-banking-fund-transfer-service-tg"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-fund-transfer-service-tg"
          + "Project"     = "Internet-Banking"
        }
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 30
          + matcher             = "200"
          + path                = "/actuator/health"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 3
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # module.internet_banking.module.ecs.aws_lb_target_group.private["keycloak"] will be created
  + resource "aws_lb_target_group" "private" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "dev-keycloak-tg"
      + name_prefix                        = (known after apply)
      + port                               = 8080
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Name" = "dev-keycloak-tg"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-keycloak-tg"
          + "Project"     = "Internet-Banking"
        }
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 30
          + matcher             = "200"
          + path                = "/health/ready"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 3
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # module.internet_banking.module.ecs.aws_lb_target_group.private["service_registry"] will be created
  + resource "aws_lb_target_group" "private" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "dev-service-registry-tg"
      + name_prefix                        = (known after apply)
      + port                               = 8081
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Name" = "dev-internet-banking-service-registry-tg"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-service-registry-tg"
          + "Project"     = "Internet-Banking"
        }
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 30
          + matcher             = "200"
          + path                = "/actuator/health"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 3
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # module.internet_banking.module.ecs.aws_lb_target_group.private["user_service"] will be created
  + resource "aws_lb_target_group" "private" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "dev-user-service-tg"
      + name_prefix                        = (known after apply)
      + port                               = 8083
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Name" = "dev-internet-banking-user-service-tg"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-user-service-tg"
          + "Project"     = "Internet-Banking"
        }
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 30
          + matcher             = "200"
          + path                = "/actuator/health"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 3
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # module.internet_banking.module.ecs.aws_lb_target_group.private["utility_payment_service"] will be created
  + resource "aws_lb_target_group" "private" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "dev-utility-payment-service-tg"
      + name_prefix                        = (known after apply)
      + port                               = 8085
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Name" = "dev-internet-banking-utility-payment-service-tg"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-utility-payment-service-tg"
          + "Project"     = "Internet-Banking"
        }
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 30
          + matcher             = "200"
          + path                = "/actuator/health"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 3
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # module.internet_banking.module.ecs.aws_lb_target_group.private["zipkin"] will be created
  + resource "aws_lb_target_group" "private" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "dev-zipkin-tg"
      + name_prefix                        = (known after apply)
      + port                               = 9411
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Name" = "dev-zipkin-tg"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-zipkin-tg"
          + "Project"     = "Internet-Banking"
        }
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 30
          + matcher             = "200"
          + path                = "/actuator/health"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 3
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # module.internet_banking.module.ecs.aws_lb_target_group.public["api_gateway"] will be created
  + resource "aws_lb_target_group" "public" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "dev-api-gateway-tg"
      + name_prefix                        = (known after apply)
      + port                               = 8082
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Name" = "dev-internet-banking-api-gateway-tg"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-api-gateway-tg"
          + "Project"     = "Internet-Banking"
        }
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 30
          + matcher             = "200"
          + path                = "/actuator/health"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 3
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # module.internet_banking.module.elasticache.aws_elasticache_parameter_group.redis will be created
  + resource "aws_elasticache_parameter_group" "redis" {
      + arn         = (known after apply)
      + description = "Managed by Terraform"
      + family      = "redis6.x"
      + id          = (known after apply)
      + name        = "dev-redis-params"
      + tags_all    = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + parameter {
          + name  = "maxmemory-policy"
          + value = "allkeys-lru"
        }
    }

  # module.internet_banking.module.elasticache.aws_elasticache_replication_group.redis will be created
  + resource "aws_elasticache_replication_group" "redis" {
      + apply_immediately              = (known after apply)
      + arn                            = (known after apply)
      + at_rest_encryption_enabled     = "true"
      + auth_token_update_strategy     = "ROTATE"
      + auto_minor_version_upgrade     = (known after apply)
      + automatic_failover_enabled     = false
      + cluster_enabled                = (known after apply)
      + cluster_mode                   = (known after apply)
      + configuration_endpoint_address = (known after apply)
      + data_tiering_enabled           = (known after apply)
      + description                    = "Redis cluster for Internet Banking application"
      + engine                         = "redis"
      + engine_version                 = "6.2"
      + engine_version_actual          = (known after apply)
      + global_replication_group_id    = (known after apply)
      + id                             = (known after apply)
      + ip_discovery                   = (known after apply)
      + maintenance_window             = "mon:05:00-mon:06:00"
      + member_clusters                = (known after apply)
      + multi_az_enabled               = false
      + network_type                   = (known after apply)
      + node_type                      = "cache.t3.medium"
      + num_cache_clusters             = 1
      + num_node_groups                = (known after apply)
      + parameter_group_name           = "dev-redis-params"
      + port                           = 6379
      + primary_endpoint_address       = (known after apply)
      + reader_endpoint_address        = (known after apply)
      + replicas_per_node_group        = (known after apply)
      + replication_group_id           = "dev-internet-banking-redis"
      + security_group_ids             = (known after apply)
      + security_group_names           = (known after apply)
      + snapshot_retention_limit       = 1
      + snapshot_window                = "06:00-07:00"
      + subnet_group_name              = "dev-redis-subnet-group"
      + tags                           = {
          + "Name" = "dev-internet-banking-redis"
        }
      + tags_all                       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-redis"
          + "Project"     = "Internet-Banking"
        }
      + transit_encryption_enabled     = true
      + transit_encryption_mode        = (known after apply)
    }

  # module.internet_banking.module.elasticache.aws_elasticache_subnet_group.redis will be created
  + resource "aws_elasticache_subnet_group" "redis" {
      + arn         = (known after apply)
      + description = "Managed by Terraform"
      + id          = (known after apply)
      + name        = "dev-redis-subnet-group"
      + subnet_ids  = (known after apply)
      + tags_all    = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id      = (known after apply)
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_dashboard.main will be created
  + resource "aws_cloudwatch_dashboard" "main" {
      + dashboard_arn  = (known after apply)
      + dashboard_body = (known after apply)
      + dashboard_name = "dev-internet-banking-dashboard"
      + id             = (known after apply)
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_group.service_logs["api_gateway"] will be created
  + resource "aws_cloudwatch_log_group" "service_logs" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/dev-internet-banking-api-gateway"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/dev-internet-banking-api-gateway"
          + "Service"     = "api_gateway"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/dev-internet-banking-api-gateway"
          + "Project"     = "Internet-Banking"
          + "Service"     = "api_gateway"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_group.service_logs["config_server"] will be created
  + resource "aws_cloudwatch_log_group" "service_logs" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/dev-internet-banking-config-server"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/dev-internet-banking-config-server"
          + "Service"     = "config_server"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/dev-internet-banking-config-server"
          + "Project"     = "Internet-Banking"
          + "Service"     = "config_server"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_group.service_logs["core_banking_service"] will be created
  + resource "aws_cloudwatch_log_group" "service_logs" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/dev-core-banking-service"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/dev-core-banking-service"
          + "Service"     = "core_banking_service"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/dev-core-banking-service"
          + "Project"     = "Internet-Banking"
          + "Service"     = "core_banking_service"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_group.service_logs["fund_transfer_service"] will be created
  + resource "aws_cloudwatch_log_group" "service_logs" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/dev-internet-banking-fund-transfer-service"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/dev-internet-banking-fund-transfer-service"
          + "Service"     = "fund_transfer_service"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/dev-internet-banking-fund-transfer-service"
          + "Project"     = "Internet-Banking"
          + "Service"     = "fund_transfer_service"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_group.service_logs["keycloak"] will be created
  + resource "aws_cloudwatch_log_group" "service_logs" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/dev-keycloak"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/dev-keycloak"
          + "Service"     = "keycloak"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/dev-keycloak"
          + "Project"     = "Internet-Banking"
          + "Service"     = "keycloak"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_group.service_logs["service_registry"] will be created
  + resource "aws_cloudwatch_log_group" "service_logs" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/dev-internet-banking-service-registry"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/dev-internet-banking-service-registry"
          + "Service"     = "service_registry"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/dev-internet-banking-service-registry"
          + "Project"     = "Internet-Banking"
          + "Service"     = "service_registry"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_group.service_logs["user_service"] will be created
  + resource "aws_cloudwatch_log_group" "service_logs" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/dev-internet-banking-user-service"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/dev-internet-banking-user-service"
          + "Service"     = "user_service"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/dev-internet-banking-user-service"
          + "Project"     = "Internet-Banking"
          + "Service"     = "user_service"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_group.service_logs["utility_payment_service"] will be created
  + resource "aws_cloudwatch_log_group" "service_logs" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/dev-internet-banking-utility-payment-service"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/dev-internet-banking-utility-payment-service"
          + "Service"     = "utility_payment_service"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/dev-internet-banking-utility-payment-service"
          + "Project"     = "Internet-Banking"
          + "Service"     = "utility_payment_service"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_group.service_logs["zipkin"] will be created
  + resource "aws_cloudwatch_log_group" "service_logs" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/ecs/dev/dev-zipkin"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/ecs/dev/dev-zipkin"
          + "Service"     = "zipkin"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/ecs/dev/dev-zipkin"
          + "Project"     = "Internet-Banking"
          + "Service"     = "zipkin"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_metric_filter.error_logs["api_gateway"] will be created
  + resource "aws_cloudwatch_log_metric_filter" "error_logs" {
      + id             = (known after apply)
      + log_group_name = "/ecs/dev/dev-internet-banking-api-gateway"
      + name           = "dev-api_gateway-error-logs"
      + pattern        = "ERROR"

      + metric_transformation {
          + name      = "api_gatewayErrorCount"
          + namespace = "InternetBanking/ErrorLogs"
          + unit      = "None"
          + value     = "1"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_metric_filter.error_logs["config_server"] will be created
  + resource "aws_cloudwatch_log_metric_filter" "error_logs" {
      + id             = (known after apply)
      + log_group_name = "/ecs/dev/dev-internet-banking-config-server"
      + name           = "dev-config_server-error-logs"
      + pattern        = "ERROR"

      + metric_transformation {
          + name      = "config_serverErrorCount"
          + namespace = "InternetBanking/ErrorLogs"
          + unit      = "None"
          + value     = "1"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_metric_filter.error_logs["core_banking_service"] will be created
  + resource "aws_cloudwatch_log_metric_filter" "error_logs" {
      + id             = (known after apply)
      + log_group_name = "/ecs/dev/dev-core-banking-service"
      + name           = "dev-core_banking_service-error-logs"
      + pattern        = "ERROR"

      + metric_transformation {
          + name      = "core_banking_serviceErrorCount"
          + namespace = "InternetBanking/ErrorLogs"
          + unit      = "None"
          + value     = "1"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_metric_filter.error_logs["fund_transfer_service"] will be created
  + resource "aws_cloudwatch_log_metric_filter" "error_logs" {
      + id             = (known after apply)
      + log_group_name = "/ecs/dev/dev-internet-banking-fund-transfer-service"
      + name           = "dev-fund_transfer_service-error-logs"
      + pattern        = "ERROR"

      + metric_transformation {
          + name      = "fund_transfer_serviceErrorCount"
          + namespace = "InternetBanking/ErrorLogs"
          + unit      = "None"
          + value     = "1"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_metric_filter.error_logs["keycloak"] will be created
  + resource "aws_cloudwatch_log_metric_filter" "error_logs" {
      + id             = (known after apply)
      + log_group_name = "/ecs/dev/dev-keycloak"
      + name           = "dev-keycloak-error-logs"
      + pattern        = "ERROR"

      + metric_transformation {
          + name      = "keycloakErrorCount"
          + namespace = "InternetBanking/ErrorLogs"
          + unit      = "None"
          + value     = "1"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_metric_filter.error_logs["service_registry"] will be created
  + resource "aws_cloudwatch_log_metric_filter" "error_logs" {
      + id             = (known after apply)
      + log_group_name = "/ecs/dev/dev-internet-banking-service-registry"
      + name           = "dev-service_registry-error-logs"
      + pattern        = "ERROR"

      + metric_transformation {
          + name      = "service_registryErrorCount"
          + namespace = "InternetBanking/ErrorLogs"
          + unit      = "None"
          + value     = "1"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_metric_filter.error_logs["user_service"] will be created
  + resource "aws_cloudwatch_log_metric_filter" "error_logs" {
      + id             = (known after apply)
      + log_group_name = "/ecs/dev/dev-internet-banking-user-service"
      + name           = "dev-user_service-error-logs"
      + pattern        = "ERROR"

      + metric_transformation {
          + name      = "user_serviceErrorCount"
          + namespace = "InternetBanking/ErrorLogs"
          + unit      = "None"
          + value     = "1"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_metric_filter.error_logs["utility_payment_service"] will be created
  + resource "aws_cloudwatch_log_metric_filter" "error_logs" {
      + id             = (known after apply)
      + log_group_name = "/ecs/dev/dev-internet-banking-utility-payment-service"
      + name           = "dev-utility_payment_service-error-logs"
      + pattern        = "ERROR"

      + metric_transformation {
          + name      = "utility_payment_serviceErrorCount"
          + namespace = "InternetBanking/ErrorLogs"
          + unit      = "None"
          + value     = "1"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_log_metric_filter.error_logs["zipkin"] will be created
  + resource "aws_cloudwatch_log_metric_filter" "error_logs" {
      + id             = (known after apply)
      + log_group_name = "/ecs/dev/dev-zipkin"
      + name           = "dev-zipkin-error-logs"
      + pattern        = "ERROR"

      + metric_transformation {
          + name      = "zipkinErrorCount"
          + namespace = "InternetBanking/ErrorLogs"
          + unit      = "None"
          + value     = "1"
        }
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_metric_alarm.ecs_cpu_utilization will be created
  + resource "aws_cloudwatch_metric_alarm" "ecs_cpu_utilization" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This metric monitors ECS cluster CPU utilization"
      + alarm_name                            = "dev-ecs-cluster-cpu-utilization"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "CPUUtilization"
      + namespace                             = "AWS/ECS"
      + ok_actions                            = (known after apply)
      + period                                = 300
      + statistic                             = "Average"
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + threshold                             = 80
      + treat_missing_data                    = "missing"
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_metric_alarm.ecs_memory_utilization will be created
  + resource "aws_cloudwatch_metric_alarm" "ecs_memory_utilization" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This metric monitors ECS cluster memory utilization"
      + alarm_name                            = "dev-ecs-cluster-memory-utilization"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "MemoryUtilization"
      + namespace                             = "AWS/ECS"
      + ok_actions                            = (known after apply)
      + period                                = 300
      + statistic                             = "Average"
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + threshold                             = 80
      + treat_missing_data                    = "missing"
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_metric_alarm.error_logs["api_gateway"] will be created
  + resource "aws_cloudwatch_metric_alarm" "error_logs" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This metric monitors error logs for api_gateway"
      + alarm_name                            = "dev-api_gateway-error-logs"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 1
      + id                                    = (known after apply)
      + metric_name                           = "api_gatewayErrorCount"
      + namespace                             = "InternetBanking/ErrorLogs"
      + ok_actions                            = (known after apply)
      + period                                = 300
      + statistic                             = "Sum"
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + threshold                             = 5
      + treat_missing_data                    = "missing"
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_metric_alarm.error_logs["config_server"] will be created
  + resource "aws_cloudwatch_metric_alarm" "error_logs" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This metric monitors error logs for config_server"
      + alarm_name                            = "dev-config_server-error-logs"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 1
      + id                                    = (known after apply)
      + metric_name                           = "config_serverErrorCount"
      + namespace                             = "InternetBanking/ErrorLogs"
      + ok_actions                            = (known after apply)
      + period                                = 300
      + statistic                             = "Sum"
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + threshold                             = 5
      + treat_missing_data                    = "missing"
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_metric_alarm.error_logs["core_banking_service"] will be created
  + resource "aws_cloudwatch_metric_alarm" "error_logs" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This metric monitors error logs for core_banking_service"
      + alarm_name                            = "dev-core_banking_service-error-logs"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 1
      + id                                    = (known after apply)
      + metric_name                           = "core_banking_serviceErrorCount"
      + namespace                             = "InternetBanking/ErrorLogs"
      + ok_actions                            = (known after apply)
      + period                                = 300
      + statistic                             = "Sum"
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + threshold                             = 5
      + treat_missing_data                    = "missing"
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_metric_alarm.error_logs["fund_transfer_service"] will be created
  + resource "aws_cloudwatch_metric_alarm" "error_logs" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This metric monitors error logs for fund_transfer_service"
      + alarm_name                            = "dev-fund_transfer_service-error-logs"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 1
      + id                                    = (known after apply)
      + metric_name                           = "fund_transfer_serviceErrorCount"
      + namespace                             = "InternetBanking/ErrorLogs"
      + ok_actions                            = (known after apply)
      + period                                = 300
      + statistic                             = "Sum"
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + threshold                             = 5
      + treat_missing_data                    = "missing"
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_metric_alarm.error_logs["keycloak"] will be created
  + resource "aws_cloudwatch_metric_alarm" "error_logs" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This metric monitors error logs for keycloak"
      + alarm_name                            = "dev-keycloak-error-logs"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 1
      + id                                    = (known after apply)
      + metric_name                           = "keycloakErrorCount"
      + namespace                             = "InternetBanking/ErrorLogs"
      + ok_actions                            = (known after apply)
      + period                                = 300
      + statistic                             = "Sum"
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + threshold                             = 5
      + treat_missing_data                    = "missing"
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_metric_alarm.error_logs["service_registry"] will be created
  + resource "aws_cloudwatch_metric_alarm" "error_logs" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This metric monitors error logs for service_registry"
      + alarm_name                            = "dev-service_registry-error-logs"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 1
      + id                                    = (known after apply)
      + metric_name                           = "service_registryErrorCount"
      + namespace                             = "InternetBanking/ErrorLogs"
      + ok_actions                            = (known after apply)
      + period                                = 300
      + statistic                             = "Sum"
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + threshold                             = 5
      + treat_missing_data                    = "missing"
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_metric_alarm.error_logs["user_service"] will be created
  + resource "aws_cloudwatch_metric_alarm" "error_logs" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This metric monitors error logs for user_service"
      + alarm_name                            = "dev-user_service-error-logs"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 1
      + id                                    = (known after apply)
      + metric_name                           = "user_serviceErrorCount"
      + namespace                             = "InternetBanking/ErrorLogs"
      + ok_actions                            = (known after apply)
      + period                                = 300
      + statistic                             = "Sum"
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + threshold                             = 5
      + treat_missing_data                    = "missing"
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_metric_alarm.error_logs["utility_payment_service"] will be created
  + resource "aws_cloudwatch_metric_alarm" "error_logs" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This metric monitors error logs for utility_payment_service"
      + alarm_name                            = "dev-utility_payment_service-error-logs"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 1
      + id                                    = (known after apply)
      + metric_name                           = "utility_payment_serviceErrorCount"
      + namespace                             = "InternetBanking/ErrorLogs"
      + ok_actions                            = (known after apply)
      + period                                = 300
      + statistic                             = "Sum"
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + threshold                             = 5
      + treat_missing_data                    = "missing"
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_metric_alarm.error_logs["zipkin"] will be created
  + resource "aws_cloudwatch_metric_alarm" "error_logs" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This metric monitors error logs for zipkin"
      + alarm_name                            = "dev-zipkin-error-logs"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 1
      + id                                    = (known after apply)
      + metric_name                           = "zipkinErrorCount"
      + namespace                             = "InternetBanking/ErrorLogs"
      + ok_actions                            = (known after apply)
      + period                                = 300
      + statistic                             = "Sum"
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + threshold                             = 5
      + treat_missing_data                    = "missing"
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_metric_alarm.mysql_cpu_utilization will be created
  + resource "aws_cloudwatch_metric_alarm" "mysql_cpu_utilization" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This metric monitors MySQL RDS CPU utilization"
      + alarm_name                            = "dev-mysql-cpu-utilization"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "CPUUtilization"
      + namespace                             = "AWS/RDS"
      + ok_actions                            = (known after apply)
      + period                                = 300
      + statistic                             = "Average"
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + threshold                             = 80
      + treat_missing_data                    = "missing"
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_metric_alarm.mysql_freeable_memory will be created
  + resource "aws_cloudwatch_metric_alarm" "mysql_freeable_memory" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This metric monitors MySQL RDS freeable memory"
      + alarm_name                            = "dev-mysql-freeable-memory"
      + arn                                   = (known after apply)
      + comparison_operator                   = "LessThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "FreeableMemory"
      + namespace                             = "AWS/RDS"
      + ok_actions                            = (known after apply)
      + period                                = 300
      + statistic                             = "Average"
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + threshold                             = 1000000000
      + treat_missing_data                    = "missing"
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_metric_alarm.postgres_cpu_utilization will be created
  + resource "aws_cloudwatch_metric_alarm" "postgres_cpu_utilization" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This metric monitors PostgreSQL RDS CPU utilization"
      + alarm_name                            = "dev-postgres-cpu-utilization"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "CPUUtilization"
      + namespace                             = "AWS/RDS"
      + ok_actions                            = (known after apply)
      + period                                = 300
      + statistic                             = "Average"
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + threshold                             = 80
      + treat_missing_data                    = "missing"
    }

  # module.internet_banking.module.monitoring.aws_cloudwatch_metric_alarm.postgres_freeable_memory will be created
  + resource "aws_cloudwatch_metric_alarm" "postgres_freeable_memory" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This metric monitors PostgreSQL RDS freeable memory"
      + alarm_name                            = "dev-postgres-freeable-memory"
      + arn                                   = (known after apply)
      + comparison_operator                   = "LessThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "FreeableMemory"
      + namespace                             = "AWS/RDS"
      + ok_actions                            = (known after apply)
      + period                                = 300
      + statistic                             = "Average"
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + threshold                             = 1000000000
      + treat_missing_data                    = "missing"
    }

  # module.internet_banking.module.monitoring.aws_sns_topic.alarms will be created
  + resource "aws_sns_topic" "alarms" {
      + arn                         = (known after apply)
      + beginning_archive_time      = (known after apply)
      + content_based_deduplication = false
      + fifo_throughput_scope       = (known after apply)
      + fifo_topic                  = false
      + id                          = (known after apply)
      + name                        = "dev-internet-banking-alarms"
      + name_prefix                 = (known after apply)
      + owner                       = (known after apply)
      + policy                      = (known after apply)
      + signature_version           = (known after apply)
      + tags                        = {
          + "Environment" = "dev"
          + "Name"        = "dev-internet-banking-alarms"
        }
      + tags_all                    = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-alarms"
          + "Project"     = "Internet-Banking"
        }
      + tracing_config              = (known after apply)
    }

  # module.internet_banking.module.rds.aws_db_instance.mysql will be created
  + resource "aws_db_instance" "mysql" {
      + address                               = (known after apply)
      + allocated_storage                     = 20
      + apply_immediately                     = false
      + arn                                   = (known after apply)
      + auto_minor_version_upgrade            = true
      + availability_zone                     = (known after apply)
      + backup_retention_period               = 1
      + backup_target                         = (known after apply)
      + backup_window                         = "03:00-04:00"
      + ca_cert_identifier                    = (known after apply)
      + character_set_name                    = (known after apply)
      + copy_tags_to_snapshot                 = false
      + database_insights_mode                = (known after apply)
      + db_name                               = "banking_core"
      + db_subnet_group_name                  = "dev-mysql-subnet-group"
      + dedicated_log_volume                  = false
      + delete_automated_backups              = true
      + deletion_protection                   = false
      + domain_fqdn                           = (known after apply)
      + enabled_cloudwatch_logs_exports       = [
          + "error",
          + "general",
          + "slowquery",
        ]
      + endpoint                              = (known after apply)
      + engine                                = "mysql"
      + engine_lifecycle_support              = (known after apply)
      + engine_version                        = "8.0"
      + engine_version_actual                 = (known after apply)
      + hosted_zone_id                        = (known after apply)
      + id                                    = (known after apply)
      + identifier                            = "dev-banking-core-mysql"
      + identifier_prefix                     = (known after apply)
      + instance_class                        = "db.t3.medium"
      + iops                                  = (known after apply)
      + kms_key_id                            = (known after apply)
      + latest_restorable_time                = (known after apply)
      + license_model                         = (known after apply)
      + listener_endpoint                     = (known after apply)
      + maintenance_window                    = "mon:04:00-mon:05:00"
      + master_user_secret                    = (known after apply)
      + master_user_secret_kms_key_id         = (known after apply)
      + max_allocated_storage                 = 100
      + monitoring_interval                   = 0
      + monitoring_role_arn                   = (known after apply)
      + multi_az                              = false
      + nchar_character_set_name              = (known after apply)
      + network_type                          = (known after apply)
      + option_group_name                     = (known after apply)
      + parameter_group_name                  = "dev-mysql-params"
      + password                              = (sensitive value)
      + performance_insights_enabled          = false
      + performance_insights_kms_key_id       = (known after apply)
      + performance_insights_retention_period = (known after apply)
      + port                                  = (known after apply)
      + publicly_accessible                   = false
      + replica_mode                          = (known after apply)
      + replicas                              = (known after apply)
      + resource_id                           = (known after apply)
      + skip_final_snapshot                   = true
      + snapshot_identifier                   = (known after apply)
      + status                                = (known after apply)
      + storage_encrypted                     = true
      + storage_throughput                    = (known after apply)
      + storage_type                          = "gp2"
      + tags                                  = {
          + "Name" = "dev-banking-core-mysql"
        }
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-banking-core-mysql"
          + "Project"     = "Internet-Banking"
        }
      + timezone                              = (known after apply)
      + username                              = (sensitive value)
      + vpc_security_group_ids                = (known after apply)
    }

  # module.internet_banking.module.rds.aws_db_instance.postgres will be created
  + resource "aws_db_instance" "postgres" {
      + address                               = (known after apply)
      + allocated_storage                     = 20
      + apply_immediately                     = false
      + arn                                   = (known after apply)
      + auto_minor_version_upgrade            = true
      + availability_zone                     = (known after apply)
      + backup_retention_period               = 1
      + backup_target                         = (known after apply)
      + backup_window                         = "03:00-04:00"
      + ca_cert_identifier                    = (known after apply)
      + character_set_name                    = (known after apply)
      + copy_tags_to_snapshot                 = false
      + database_insights_mode                = (known after apply)
      + db_name                               = "keycloak"
      + db_subnet_group_name                  = "dev-postgres-subnet-group"
      + dedicated_log_volume                  = false
      + delete_automated_backups              = true
      + deletion_protection                   = false
      + domain_fqdn                           = (known after apply)
      + enabled_cloudwatch_logs_exports       = [
          + "postgresql",
          + "upgrade",
        ]
      + endpoint                              = (known after apply)
      + engine                                = "postgres"
      + engine_lifecycle_support              = (known after apply)
      + engine_version                        = "15.13"
      + engine_version_actual                 = (known after apply)
      + hosted_zone_id                        = (known after apply)
      + id                                    = (known after apply)
      + identifier                            = "dev-keycloak-postgres"
      + identifier_prefix                     = (known after apply)
      + instance_class                        = "db.t3.medium"
      + iops                                  = (known after apply)
      + kms_key_id                            = (known after apply)
      + latest_restorable_time                = (known after apply)
      + license_model                         = (known after apply)
      + listener_endpoint                     = (known after apply)
      + maintenance_window                    = "mon:04:00-mon:05:00"
      + master_user_secret                    = (known after apply)
      + master_user_secret_kms_key_id         = (known after apply)
      + max_allocated_storage                 = 100
      + monitoring_interval                   = 0
      + monitoring_role_arn                   = (known after apply)
      + multi_az                              = false
      + nchar_character_set_name              = (known after apply)
      + network_type                          = (known after apply)
      + option_group_name                     = (known after apply)
      + parameter_group_name                  = "dev-postgres-params"
      + password                              = (sensitive value)
      + performance_insights_enabled          = false
      + performance_insights_kms_key_id       = (known after apply)
      + performance_insights_retention_period = (known after apply)
      + port                                  = (known after apply)
      + publicly_accessible                   = false
      + replica_mode                          = (known after apply)
      + replicas                              = (known after apply)
      + resource_id                           = (known after apply)
      + skip_final_snapshot                   = true
      + snapshot_identifier                   = (known after apply)
      + status                                = (known after apply)
      + storage_encrypted                     = true
      + storage_throughput                    = (known after apply)
      + storage_type                          = "gp2"
      + tags                                  = {
          + "Name" = "dev-keycloak-postgres"
        }
      + tags_all                              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-keycloak-postgres"
          + "Project"     = "Internet-Banking"
        }
      + timezone                              = (known after apply)
      + username                              = (sensitive value)
      + vpc_security_group_ids                = (known after apply)
    }

  # module.internet_banking.module.rds.aws_db_parameter_group.mysql will be created
  + resource "aws_db_parameter_group" "mysql" {
      + arn          = (known after apply)
      + description  = "Managed by Terraform"
      + family       = "mysql8.0"
      + id           = (known after apply)
      + name         = "dev-mysql-params"
      + name_prefix  = (known after apply)
      + skip_destroy = false
      + tags_all     = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + parameter {
          + apply_method = "immediate"
          + name         = "character_set_client"
          + value        = "utf8"
        }
      + parameter {
          + apply_method = "immediate"
          + name         = "character_set_server"
          + value        = "utf8"
        }
    }

  # module.internet_banking.module.rds.aws_db_parameter_group.postgres will be created
  + resource "aws_db_parameter_group" "postgres" {
      + arn          = (known after apply)
      + description  = "Managed by Terraform"
      + family       = "postgres15"
      + id           = (known after apply)
      + name         = "dev-postgres-params"
      + name_prefix  = (known after apply)
      + skip_destroy = false
      + tags_all     = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + parameter {
          + apply_method = "immediate"
          + name         = "log_connections"
          + value        = "1"
        }
    }

  # module.internet_banking.module.rds.aws_db_subnet_group.mysql will be created
  + resource "aws_db_subnet_group" "mysql" {
      + arn                     = (known after apply)
      + description             = "Managed by Terraform"
      + id                      = (known after apply)
      + name                    = "dev-mysql-subnet-group"
      + name_prefix             = (known after apply)
      + subnet_ids              = (known after apply)
      + supported_network_types = (known after apply)
      + tags                    = {
          + "Name" = "dev-mysql-subnet-group"
        }
      + tags_all                = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-mysql-subnet-group"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id                  = (known after apply)
    }

  # module.internet_banking.module.rds.aws_db_subnet_group.postgres will be created
  + resource "aws_db_subnet_group" "postgres" {
      + arn                     = (known after apply)
      + description             = "Managed by Terraform"
      + id                      = (known after apply)
      + name                    = "dev-postgres-subnet-group"
      + name_prefix             = (known after apply)
      + subnet_ids              = (known after apply)
      + supported_network_types = (known after apply)
      + tags                    = {
          + "Name" = "dev-postgres-subnet-group"
        }
      + tags_all                = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-postgres-subnet-group"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id                  = (known after apply)
    }

  # module.internet_banking.module.route53.aws_route53_zone.main will be created
  + resource "aws_route53_zone" "main" {
      + arn                 = (known after apply)
      + comment             = "Managed by Terraform"
      + force_destroy       = false
      + id                  = (known after apply)
      + name                = "internetbanking-example.com"
      + name_servers        = (known after apply)
      + primary_name_server = (known after apply)
      + tags                = {
          + "Environment" = "dev"
          + "Name"        = "internetbanking-example.com"
        }
      + tags_all            = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "internetbanking-example.com"
          + "Project"     = "Internet-Banking"
        }
      + zone_id             = (known after apply)
    }

  # module.internet_banking.module.security.aws_security_group.api_gateway will be created
  + resource "aws_security_group" "api_gateway" {
      + arn                    = (known after apply)
      + description            = "Security group for API Gateway"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow all outbound traffic"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow HTTP traffic"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow HTTPS traffic"
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
            },
        ]
      + name                   = "dev-api-gateway-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "dev-api-gateway-sg"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-api-gateway-sg"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id                 = (known after apply)
    }

  # module.internet_banking.module.security.aws_security_group.ecs will be created
  + resource "aws_security_group" "ecs" {
      + arn                    = (known after apply)
      + description            = "Security group for ECS services"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow all outbound traffic"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = "Allow all traffic from API Gateway"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 0
            },
          + {
              + cidr_blocks      = []
              + description      = "Allow all traffic from self"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = true
              + to_port          = 0
            },
        ]
      + name                   = "dev-ecs-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "dev-ecs-sg"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-ecs-sg"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id                 = (known after apply)
    }

  # module.internet_banking.module.security.aws_security_group.mysql will be created
  + resource "aws_security_group" "mysql" {
      + arn                    = (known after apply)
      + description            = "Security group for MySQL RDS"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow all outbound traffic"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = "Allow MySQL traffic from ECS services"
              + from_port        = 3306
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 3306
            },
        ]
      + name                   = "dev-mysql-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "dev-mysql-sg"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-mysql-sg"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id                 = (known after apply)
    }

  # module.internet_banking.module.security.aws_security_group.postgres will be created
  + resource "aws_security_group" "postgres" {
      + arn                    = (known after apply)
      + description            = "Security group for PostgreSQL RDS (Keycloak)"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow all outbound traffic"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = "Allow PostgreSQL traffic from ECS services"
              + from_port        = 5432
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 5432
            },
        ]
      + name                   = "dev-postgres-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "dev-postgres-sg"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-postgres-sg"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id                 = (known after apply)
    }

  # module.internet_banking.module.security.aws_security_group.redis will be created
  + resource "aws_security_group" "redis" {
      + arn                    = (known after apply)
      + description            = "Security group for Redis ElastiCache"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow all outbound traffic"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = "Allow Redis traffic from ECS services"
              + from_port        = 6379
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 6379
            },
        ]
      + name                   = "dev-redis-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "dev-redis-sg"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-redis-sg"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id                 = (known after apply)
    }

  # module.internet_banking.module.security_scanning.aws_codebuild_project.security_scan will be created
  + resource "aws_codebuild_project" "security_scan" {
      + arn                  = (known after apply)
      + badge_enabled        = false
      + badge_url            = (known after apply)
      + build_timeout        = 30
      + description          = "Security scanning for Terraform code using tfsec and checkov"
      + encryption_key       = (known after apply)
      + id                   = (known after apply)
      + name                 = "dev-internet-banking-security-scan"
      + project_visibility   = "PRIVATE"
      + public_project_alias = (known after apply)
      + queued_timeout       = 480
      + service_role         = (known after apply)
      + tags                 = {
          + "Environment" = "dev"
        }
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }

      + artifacts {
          + encryption_disabled    = false
          + location               = "dev-internet-banking-security-reports"
          + name                   = "security-reports"
          + override_artifact_name = false
          + packaging              = "ZIP"
          + path                   = "reports"
          + type                   = "S3"
        }

      + environment {
          + compute_type                = "BUILD_GENERAL1_SMALL"
          + image                       = "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
          + image_pull_credentials_type = "CODEBUILD"
          + privileged_mode             = true
          + type                        = "LINUX_CONTAINER"

          + environment_variable {
              + name  = "ENVIRONMENT"
              + type  = "PLAINTEXT"
              + value = "dev"
            }
        }

      + logs_config {
          + cloudwatch_logs {
              + group_name  = "/codebuild/dev-internet-banking-security-scan"
              + status      = "ENABLED"
              + stream_name = "build-log"
            }
        }

      + source {
          + buildspec = "terraform/security-buildspec.yml"
          + location  = (known after apply)
          + type      = "S3"
        }
    }

  # module.internet_banking.module.security_scanning.aws_codepipeline.security_scan_pipeline will be created
  + resource "aws_codepipeline" "security_scan_pipeline" {
      + arn            = (known after apply)
      + execution_mode = "SUPERSEDED"
      + id             = (known after apply)
      + name           = "dev-internet-banking-security-scan-pipeline"
      + pipeline_type  = "V1"
      + role_arn       = (known after apply)
      + tags_all       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + trigger_all    = (known after apply)

      + artifact_store {
          + location = "dev-internet-banking-security-reports"
          + type     = "S3"
            # (1 unchanged attribute hidden)
        }

      + stage {
          + name = "Source"

          + action {
              + category         = "Source"
              + configuration    = {
                  + "BranchName"       = "main"
                  + "ConnectionArn"    = "arn:aws:codestar-connections:us-east-1:156041437006:connection/063c7eb0-7e04-4882-9a5a-810294a094cc"
                  + "FullRepositoryId" = "Olisaemeka111/internet-banking-app"
                }
              + name             = "Source"
              + output_artifacts = [
                  + "source_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeStarSourceConnection"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "SecurityScan"

          + action {
              + category         = "Build"
              + configuration    = {
                  + "ProjectName" = "dev-internet-banking-security-scan"
                }
              + input_artifacts  = [
                  + "source_output",
                ]
              + name             = "TfsecCheckovScan"
              + output_artifacts = [
                  + "security_scan_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeBuild"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Notify"

          + action {
              + category        = "Invoke"
              + configuration   = {
                  + "FunctionName" = "dev-internet-banking-security-notification"
                }
              + input_artifacts = [
                  + "security_scan_output",
                ]
              + name            = "SecurityNotification"
              + owner           = "AWS"
              + provider        = "Lambda"
              + region          = (known after apply)
              + run_order       = (known after apply)
              + version         = "1"
            }
        }
    }

  # module.internet_banking.module.security_scanning.aws_iam_role.security_notification_role will be created
  + resource "aws_iam_role" "security_notification_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-internet-banking-security-notification-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.internet_banking.module.security_scanning.aws_iam_role.security_scan_pipeline_role will be created
  + resource "aws_iam_role" "security_scan_pipeline_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "codepipeline.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-internet-banking-security-scan-pipeline-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.internet_banking.module.security_scanning.aws_iam_role.security_scan_role will be created
  + resource "aws_iam_role" "security_scan_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "codebuild.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-internet-banking-security-scan-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.internet_banking.module.security_scanning.aws_iam_role_policy.security_notification_policy will be created
  + resource "aws_iam_role_policy" "security_notification_policy" {
      + id          = (known after apply)
      + name        = "dev-internet-banking-security-notification-policy"
      + name_prefix = (known after apply)
      + policy      = (known after apply)
      + role        = (known after apply)
    }

  # module.internet_banking.module.security_scanning.aws_iam_role_policy.security_scan_pipeline_policy will be created
  + resource "aws_iam_role_policy" "security_scan_pipeline_policy" {
      + id          = (known after apply)
      + name        = "dev-internet-banking-security-scan-pipeline-policy"
      + name_prefix = (known after apply)
      + policy      = (known after apply)
      + role        = (known after apply)
    }

  # module.internet_banking.module.security_scanning.aws_iam_role_policy.security_scan_policy will be created
  + resource "aws_iam_role_policy" "security_scan_policy" {
      + id          = (known after apply)
      + name        = "dev-internet-banking-security-scan-policy"
      + name_prefix = (known after apply)
      + policy      = (known after apply)
      + role        = (known after apply)
    }

  # module.internet_banking.module.security_scanning.aws_lambda_function.security_notification will be created
  + resource "aws_lambda_function" "security_notification" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "modules/security_scanning/security_notification.zip"
      + function_name                  = "dev-internet-banking-security-notification"
      + handler                        = "index.handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "nodejs20.x"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = "yzNftPnWVgQcwO/4tMuZ7BjQu5l31W63nYaO90bQdL0="
      + source_code_size               = (known after apply)
      + tags_all                       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + timeout                        = 30
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "ENVIRONMENT"   = "dev"
              + "REPORT_BUCKET" = "dev-internet-banking-security-reports"
            }
        }

      + ephemeral_storage (known after apply)

      + logging_config (known after apply)

      + tracing_config (known after apply)
    }

  # module.internet_banking.module.security_scanning.aws_s3_bucket.security_reports will be created
  + resource "aws_s3_bucket" "security_reports" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "dev-internet-banking-security-reports"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags_all                    = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.internet_banking.module.security_scanning.aws_s3_bucket_lifecycle_configuration.security_reports_lifecycle will be created
  + resource "aws_s3_bucket_lifecycle_configuration" "security_reports_lifecycle" {
      + bucket                                 = (known after apply)
      + expected_bucket_owner                  = (known after apply)
      + id                                     = (known after apply)
      + transition_default_minimum_object_size = "all_storage_classes_128K"

      + rule {
          + id     = "delete-old-reports"
          + status = "Enabled"
            # (1 unchanged attribute hidden)

          + expiration {
              + days                         = 90
              + expired_object_delete_marker = false
            }

          + filter {
                # (1 unchanged attribute hidden)
            }
        }
    }

  # module.internet_banking.module.security_scanning.aws_s3_bucket_versioning.security_reports_versioning will be created
  + resource "aws_s3_bucket_versioning" "security_reports_versioning" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

  # module.internet_banking.module.service_discovery.aws_service_discovery_private_dns_namespace.main will be created
  + resource "aws_service_discovery_private_dns_namespace" "main" {
      + arn         = (known after apply)
      + description = "Service discovery namespace for Internet Banking Microservices"
      + hosted_zone = (known after apply)
      + id          = (known after apply)
      + name        = "dev.internal"
      + tags        = {
          + "Environment" = "dev"
          + "Name"        = "dev.internal"
        }
      + tags_all    = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev.internal"
          + "Project"     = "Internet-Banking"
        }
      + vpc         = (known after apply)
    }

  # module.internet_banking.module.service_discovery.aws_service_discovery_service.services["api_gateway"] will be created
  + resource "aws_service_discovery_service" "services" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "api_gateway"
      + namespace_id  = (known after apply)
      + tags          = {
          + "Environment" = "dev"
          + "Name"        = "dev-api_gateway"
          + "Service"     = "api_gateway"
        }
      + tags_all      = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-api_gateway"
          + "Project"     = "Internet-Banking"
          + "Service"     = "api_gateway"
        }
      + type          = (known after apply)

      + dns_config {
          + namespace_id   = (known after apply)
          + routing_policy = "MULTIVALUE"

          + dns_records {
              + ttl  = 10
              + type = "A"
            }
        }

      + health_check_custom_config {
          + failure_threshold = 1
        }
    }

  # module.internet_banking.module.service_discovery.aws_service_discovery_service.services["config_server"] will be created
  + resource "aws_service_discovery_service" "services" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "config_server"
      + namespace_id  = (known after apply)
      + tags          = {
          + "Environment" = "dev"
          + "Name"        = "dev-config_server"
          + "Service"     = "config_server"
        }
      + tags_all      = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-config_server"
          + "Project"     = "Internet-Banking"
          + "Service"     = "config_server"
        }
      + type          = (known after apply)

      + dns_config {
          + namespace_id   = (known after apply)
          + routing_policy = "MULTIVALUE"

          + dns_records {
              + ttl  = 10
              + type = "A"
            }
        }

      + health_check_custom_config {
          + failure_threshold = 1
        }
    }

  # module.internet_banking.module.service_discovery.aws_service_discovery_service.services["core_banking_service"] will be created
  + resource "aws_service_discovery_service" "services" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "core_banking_service"
      + namespace_id  = (known after apply)
      + tags          = {
          + "Environment" = "dev"
          + "Name"        = "dev-core_banking_service"
          + "Service"     = "core_banking_service"
        }
      + tags_all      = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-core_banking_service"
          + "Project"     = "Internet-Banking"
          + "Service"     = "core_banking_service"
        }
      + type          = (known after apply)

      + dns_config {
          + namespace_id   = (known after apply)
          + routing_policy = "MULTIVALUE"

          + dns_records {
              + ttl  = 10
              + type = "A"
            }
        }

      + health_check_custom_config {
          + failure_threshold = 1
        }
    }

  # module.internet_banking.module.service_discovery.aws_service_discovery_service.services["fund_transfer_service"] will be created
  + resource "aws_service_discovery_service" "services" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "fund_transfer_service"
      + namespace_id  = (known after apply)
      + tags          = {
          + "Environment" = "dev"
          + "Name"        = "dev-fund_transfer_service"
          + "Service"     = "fund_transfer_service"
        }
      + tags_all      = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-fund_transfer_service"
          + "Project"     = "Internet-Banking"
          + "Service"     = "fund_transfer_service"
        }
      + type          = (known after apply)

      + dns_config {
          + namespace_id   = (known after apply)
          + routing_policy = "MULTIVALUE"

          + dns_records {
              + ttl  = 10
              + type = "A"
            }
        }

      + health_check_custom_config {
          + failure_threshold = 1
        }
    }

  # module.internet_banking.module.service_discovery.aws_service_discovery_service.services["keycloak"] will be created
  + resource "aws_service_discovery_service" "services" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "keycloak"
      + namespace_id  = (known after apply)
      + tags          = {
          + "Environment" = "dev"
          + "Name"        = "dev-keycloak"
          + "Service"     = "keycloak"
        }
      + tags_all      = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-keycloak"
          + "Project"     = "Internet-Banking"
          + "Service"     = "keycloak"
        }
      + type          = (known after apply)

      + dns_config {
          + namespace_id   = (known after apply)
          + routing_policy = "MULTIVALUE"

          + dns_records {
              + ttl  = 10
              + type = "A"
            }
        }

      + health_check_custom_config {
          + failure_threshold = 1
        }
    }

  # module.internet_banking.module.service_discovery.aws_service_discovery_service.services["service_registry"] will be created
  + resource "aws_service_discovery_service" "services" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "service_registry"
      + namespace_id  = (known after apply)
      + tags          = {
          + "Environment" = "dev"
          + "Name"        = "dev-service_registry"
          + "Service"     = "service_registry"
        }
      + tags_all      = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-service_registry"
          + "Project"     = "Internet-Banking"
          + "Service"     = "service_registry"
        }
      + type          = (known after apply)

      + dns_config {
          + namespace_id   = (known after apply)
          + routing_policy = "MULTIVALUE"

          + dns_records {
              + ttl  = 10
              + type = "A"
            }
        }

      + health_check_custom_config {
          + failure_threshold = 1
        }
    }

  # module.internet_banking.module.service_discovery.aws_service_discovery_service.services["user_service"] will be created
  + resource "aws_service_discovery_service" "services" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "user_service"
      + namespace_id  = (known after apply)
      + tags          = {
          + "Environment" = "dev"
          + "Name"        = "dev-user_service"
          + "Service"     = "user_service"
        }
      + tags_all      = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-user_service"
          + "Project"     = "Internet-Banking"
          + "Service"     = "user_service"
        }
      + type          = (known after apply)

      + dns_config {
          + namespace_id   = (known after apply)
          + routing_policy = "MULTIVALUE"

          + dns_records {
              + ttl  = 10
              + type = "A"
            }
        }

      + health_check_custom_config {
          + failure_threshold = 1
        }
    }

  # module.internet_banking.module.service_discovery.aws_service_discovery_service.services["utility_payment_service"] will be created
  + resource "aws_service_discovery_service" "services" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "utility_payment_service"
      + namespace_id  = (known after apply)
      + tags          = {
          + "Environment" = "dev"
          + "Name"        = "dev-utility_payment_service"
          + "Service"     = "utility_payment_service"
        }
      + tags_all      = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-utility_payment_service"
          + "Project"     = "Internet-Banking"
          + "Service"     = "utility_payment_service"
        }
      + type          = (known after apply)

      + dns_config {
          + namespace_id   = (known after apply)
          + routing_policy = "MULTIVALUE"

          + dns_records {
              + ttl  = 10
              + type = "A"
            }
        }

      + health_check_custom_config {
          + failure_threshold = 1
        }
    }

  # module.internet_banking.module.service_discovery.aws_service_discovery_service.services["zipkin"] will be created
  + resource "aws_service_discovery_service" "services" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "zipkin"
      + namespace_id  = (known after apply)
      + tags          = {
          + "Environment" = "dev"
          + "Name"        = "dev-zipkin"
          + "Service"     = "zipkin"
        }
      + tags_all      = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-zipkin"
          + "Project"     = "Internet-Banking"
          + "Service"     = "zipkin"
        }
      + type          = (known after apply)

      + dns_config {
          + namespace_id   = (known after apply)
          + routing_policy = "MULTIVALUE"

          + dns_records {
              + ttl  = 10
              + type = "A"
            }
        }

      + health_check_custom_config {
          + failure_threshold = 1
        }
    }

  # module.internet_banking.module.vpc.aws_cloudwatch_log_group.vpc_flow_log will be created
  + resource "aws_cloudwatch_log_group" "vpc_flow_log" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/aws/vpc/flow-log/dev-internet-banking"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
    }

  # module.internet_banking.module.vpc.aws_eip.nat[0] will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = "vpc"
      + id                   = (known after apply)
      + instance             = (known after apply)
      + ipam_pool_id         = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name" = "dev-nat-eip-1"
        }
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-nat-eip-1"
          + "Project"     = "Internet-Banking"
        }
      + vpc                  = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_eip.nat[1] will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = "vpc"
      + id                   = (known after apply)
      + instance             = (known after apply)
      + ipam_pool_id         = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name" = "dev-nat-eip-2"
        }
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-nat-eip-2"
          + "Project"     = "Internet-Banking"
        }
      + vpc                  = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_eip.nat[2] will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = "vpc"
      + id                   = (known after apply)
      + instance             = (known after apply)
      + ipam_pool_id         = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name" = "dev-nat-eip-3"
        }
      + tags_all             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-nat-eip-3"
          + "Project"     = "Internet-Banking"
        }
      + vpc                  = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_flow_log.vpc_flow_log will be created
  + resource "aws_flow_log" "vpc_flow_log" {
      + arn                      = (known after apply)
      + iam_role_arn             = (known after apply)
      + id                       = (known after apply)
      + log_destination          = (known after apply)
      + log_destination_type     = "cloud-watch-logs"
      + log_format               = (known after apply)
      + log_group_name           = (known after apply)
      + max_aggregation_interval = 600
      + tags_all                 = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + traffic_type             = "ALL"
      + vpc_id                   = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_iam_role.vpc_flow_log_role will be created
  + resource "aws_iam_role" "vpc_flow_log_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "vpc-flow-logs.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-vpc-flow-log-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Project"     = "Internet-Banking"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.internet_banking.module.vpc.aws_iam_role_policy.vpc_flow_log_policy will be created
  + resource "aws_iam_role_policy" "vpc_flow_log_policy" {
      + id          = (known after apply)
      + name        = "dev-vpc-flow-log-policy"
      + name_prefix = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "logs:CreateLogGroup",
                          + "logs:CreateLogStream",
                          + "logs:PutLogEvents",
                          + "logs:DescribeLogGroups",
                          + "logs:DescribeLogStreams",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role        = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "dev-internet-gateway"
        }
      + tags_all = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-gateway"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id   = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_nat_gateway.nat[0] will be created
  + resource "aws_nat_gateway" "nat" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Name" = "dev-nat-gateway-1"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-nat-gateway-1"
          + "Project"     = "Internet-Banking"
        }
    }

  # module.internet_banking.module.vpc.aws_nat_gateway.nat[1] will be created
  + resource "aws_nat_gateway" "nat" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Name" = "dev-nat-gateway-2"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-nat-gateway-2"
          + "Project"     = "Internet-Banking"
        }
    }

  # module.internet_banking.module.vpc.aws_nat_gateway.nat[2] will be created
  + resource "aws_nat_gateway" "nat" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Name" = "dev-nat-gateway-3"
        }
      + tags_all                           = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-nat-gateway-3"
          + "Project"     = "Internet-Banking"
        }
    }

  # module.internet_banking.module.vpc.aws_route_table.private[0] will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + nat_gateway_id             = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "dev-private-route-table-1"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-private-route-table-1"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id           = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_route_table.private[1] will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + nat_gateway_id             = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "dev-private-route-table-2"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-private-route-table-2"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id           = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_route_table.private[2] will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + nat_gateway_id             = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "dev-private-route-table-3"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-private-route-table-3"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id           = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_route_table.public will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "dev-public-route-table"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-public-route-table"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id           = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_route_table_association.private[0] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_route_table_association.private[1] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_route_table_association.private[2] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_route_table_association.public[0] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_route_table_association.public[1] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_route_table_association.public[2] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_subnet.private[0] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.4.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "dev-private-subnet-1"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-private-subnet-1"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_subnet.private[1] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.5.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "dev-private-subnet-2"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-private-subnet-2"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_subnet.private[2] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.6.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "dev-private-subnet-3"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-private-subnet-3"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "dev-public-subnet-1"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-public-subnet-1"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "dev-public-subnet-2"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-public-subnet-2"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_subnet.public[2] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "dev-public-subnet-3"
        }
      + tags_all                                       = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-public-subnet-3"
          + "Project"     = "Internet-Banking"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.internet_banking.module.vpc.aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "dev-internet-banking-vpc"
        }
      + tags_all                             = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-vpc"
          + "Project"     = "Internet-Banking"
        }
    }

  # module.internet_banking.module.waf.aws_cloudwatch_log_group.waf will be created
  + resource "aws_cloudwatch_log_group" "waf" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/aws/waf/dev-internet-banking-waf"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Environment" = "dev"
          + "Name"        = "/aws/waf/dev-internet-banking-waf"
        }
      + tags_all          = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "/aws/waf/dev-internet-banking-waf"
          + "Project"     = "Internet-Banking"
        }
    }

  # module.internet_banking.module.waf.aws_wafv2_web_acl.main will be created
  + resource "aws_wafv2_web_acl" "main" {
      + application_integration_url = (known after apply)
      + arn                         = (known after apply)
      + capacity                    = (known after apply)
      + description                 = "WAF Web ACL for Internet Banking API"
      + id                          = (known after apply)
      + lock_token                  = (known after apply)
      + name                        = "dev-internet-banking-waf"
      + name_prefix                 = (known after apply)
      + scope                       = "REGIONAL"
      + tags                        = {
          + "Environment" = "dev"
          + "Name"        = "dev-internet-banking-waf"
        }
      + tags_all                    = {
          + "Environment" = "dev"
          + "ManagedBy"   = "Terraform"
          + "Name"        = "dev-internet-banking-waf"
          + "Project"     = "Internet-Banking"
        }

      + default_action {
          + allow {
            }
        }

      + rule {
          + name     = "RateLimitRule"
          + priority = 3

          + action {
              + block {
                }
            }

          + statement {
              + rate_based_statement {
                  + aggregate_key_type    = "IP"
                  + evaluation_window_sec = 300
                  + limit                 = 1000
                }
            }

          + visibility_config {
              + cloudwatch_metrics_enabled = true
              + metric_name                = "RateLimitRule"
              + sampled_requests_enabled   = true
            }
        }
      + rule {
          + name     = "SQLInjectionRule"
          + priority = 1

          + action {
              + block {
                }
            }

          + statement {
              + or_statement {
                  + statement {
                      + sqli_match_statement {
                            # (1 unchanged attribute hidden)

                          + field_to_match {
                              + all_query_arguments {}
                            }

                          + text_transformation {
                              + priority = 1
                              + type     = "URL_DECODE"
                            }
                          + text_transformation {
                              + priority = 2
                              + type     = "HTML_ENTITY_DECODE"
                            }
                        }
                    }
                  + statement {
                      + sqli_match_statement {
                            # (1 unchanged attribute hidden)

                          + field_to_match {
                              + body {
                                  + oversize_handling = "CONTINUE"
                                }
                            }

                          + text_transformation {
                              + priority = 1
                              + type     = "URL_DECODE"
                            }
                          + text_transformation {
                              + priority = 2
                              + type     = "HTML_ENTITY_DECODE"
                            }
                        }
                    }
                }
            }

          + visibility_config {
              + cloudwatch_metrics_enabled = true
              + metric_name                = "SQLInjectionRule"
              + sampled_requests_enabled   = true
            }
        }
      + rule {
          + name     = "XSSRule"
          + priority = 2

          + action {
              + block {
                }
            }

          + statement {
              + or_statement {
                  + statement {
                      + xss_match_statement {
                          + field_to_match {
                              + body {
                                  + oversize_handling = "CONTINUE"
                                }
                            }
                          + text_transformation {
                              + priority = 1
                              + type     = "URL_DECODE"
                            }
                          + text_transformation {
                              + priority = 2
                              + type     = "HTML_ENTITY_DECODE"
                            }
                        }
                    }
                  + statement {
                      + xss_match_statement {
                          + field_to_match {
                              + all_query_arguments {}
                            }
                          + text_transformation {
                              + priority = 1
                              + type     = "URL_DECODE"
                            }
                          + text_transformation {
                              + priority = 2
                              + type     = "HTML_ENTITY_DECODE"
                            }
                        }
                    }
                }
            }

          + visibility_config {
              + cloudwatch_metrics_enabled = true
              + metric_name                = "XSSRule"
              + sampled_requests_enabled   = true
            }
        }

      + visibility_config {
          + cloudwatch_metrics_enabled = true
          + metric_name                = "dev-internet-banking-waf"
          + sampled_requests_enabled   = true
        }
    }

Plan: 219 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + ecs_cluster_name        = "dev-internet-banking-cluster"
  + mysql_endpoint          = (known after apply)
  + postgres_endpoint       = (known after apply)
  + private_subnet_ids      = [
      + (known after apply),
      + (known after apply),
      + (known after apply),
    ]
  + public_subnet_ids       = [
      + (known after apply),
      + (known after apply),
      + (known after apply),
    ]
  + redis_endpoint          = (known after apply)
  + security_reports_bucket = "dev-internet-banking-security-reports"
  + vpc_id                  = (known after apply)
